eztfl-html5 diary			Alistair Mann
=================================================================

20 April 2017

Upto 1430
+ Adding geolocation to original eztfl had previously been on it's
todo list. On reflection, it warrants a new project so here we go.
1430
Decide the itch to be scratched. Namely, a site that looks at where
 I am, where I'm going, and where I'll be, then use that info to
 offer bus stop suggestions.
Decide new project name, eztfl-html5
Decide do it "publicly", maybe even youtube aspects later
Decision to create as website rather than app
Introducing TFL.
Introducing me as dev and the tools I'll use.
HTTPS as a mandatory constraint
2045
The neccessity for github
Migrate existing two files to https://github.com/Csi18nAlistairMann/eztfl-html5
Rearrange authentication from un/pw to public key
2144
Create a file to track resources used (docs/Resources)
1136x640 as a voluntary constraint on the CSS displayport
Create a file to track project objectives (docs/Goals)
Move eztfl-html5\ diary to docs/Diary
Move eztfl-html5\ thoughts to docs/Thoughts
Introduce the project is at immediate risk for reasons we don't yet know
What constitutes project success?
List Known Unknowns that need to be addressed befor project starts
21 April 2017
0026
Plan for handling Known Unknowns
Add DNS entry for eztfl-html5.mpsvr.com
Add Apache entry for eztfl-html5.mpsvr.com
Resolve Unknown Unknown #1: which email address subdomain admin for
	apache
Discover Unknown Unknown #2: How to get site to pull only parts of
	 the gh repo
1119
Add JavaScript page at /uu2.html that displays position, accuracy
    speed and heading
Add docs/UnknownUnknowns to track unexpected workloads
Discover Unknown Unknown #3: accuracy is also available, which could
	 feed into processing decisions
Investigate whether devices can report speed/heading data
Investigate whether that's my bad interpretation by contrast with newer
	    devices
Discover Unknown Unknown #4: data could be returned yet not available
	 Look into what null, undefined might mean
Discover Unknown Unknown #5: That speed/heading can be manually
	 calculated
Discover Unknown Unknown #6: that iOS gives a 65m accuracy is a known
	 problem with a known solution
Discover Unknown Unknown #7: a decision to code for or abandon older
	 devices that don't offer speed/heading
Manual code for calculating bearing taken from StackExchange
Manual code for calculating distance taken from StackExchange
Prove we can obtain data from hardware via OS. Now also prove
      we can calculate missing heading and speed if necessary.
1742
Solve Unknown unknown #2 by scping from 'live' machine to local repo
Add first three files of actual code, plagiarised as they are.
Decide the maths should be client-side not server-side
Decide the TFL API will support position and radius for searching
       bus stop locations
Reassess project in light of answers to known unknowns and
	 unknown unknowns and conclude no need to change what
	 constitutes success.
Create docs/Todo

2216
Consider phase 3: implementation
Implement core: receive data and process it ready for output

23 April 2017
Replace faked prediction with actual prediction
Discover Unknown Unknown #9: Use of term Heading vs Bearing, resolve
	 by using "Angle" instead
Discover Unknown Unknown #10: position.timestamp is milliseconds since
	 epoch.
Discover Unknown Unknown #11: handling timestamp not available
Discover Unknown Unknown #12: Can JS handle the number 253402300799000
	 which representst the millisecond time for 9999-12-31
	 23:59:59
Effective vs efficient code
Consider that there's an object lurking here
Complete work effecting a real prediction
Practice some code hygiene
	 - constants
	 - comments
	 - misunderstanding input from OS
	 - rename to reflect new understanding and use
Discover Unknown Unknown #13: Should we handle sanity failures of
	 position differently? Right now we zero and carry on
2151
Consider that I've used procedural programming when I could have used
	 object-oriented
Consider how to handle drift when the user changes direction or speed
	 also to look into the predicted area and 20m behind

24 April 2017
Phase 4: Start considering the UI
First description of UI: as a cool logarithmic space with rings
      containing the layers of data; also consideration of
      storyboard possibilities, such as what to click on to get where
Consideration that this phase is about programming the layer behind
	      the screen. The UI needs this, the layer behind presents
	      it like that; phase 5 will be about the drawing
Manually walk through the relevants API calls to make sure data
	 actually present or calculable as needed
So write such as to persist bus stop data because of geolocational
   drift
Resolve CORS problem with client directly interrogating the API by
	setting up and using a reverse proxy

25 April 2017
Reusing XHR code from previous project
Handling of geolocation suddenly not working
Early test exposes problem with radius having a decimal place
Observe could save many calls to TFL by getting a far larger circle
	worth of bus stops and locally excluding those outside
	predicted area
Repeating reverse proxy work to obtain countdown data as well
Argue against persisting countdown data
Handling retrieving the data separately from drawing that data
Somehow miss the first UI option - dump it all and let the user
	sort it out
Create drawing functions intermediating between data and display

26 April 2017
Implement basic UI for bus stops, which when touched adds the
	  countdown
Review: 784 loc, 2881 if including documentation
Observations on anonymous functions
Observations on just-in-time knowledge
Review time - as the project has met the project goal. But hasn't.
UX as a separate project

28 April 2017
How usage leads to feature creep, and using suggestions to handle this
Observations on starting with a minimal acceptable project and adding
  single pretty things to the UX such that project could be signed off
  in a hurry. Thus time = the number of features allowed by time & budget
Outline of UX requirements and suggestions
Describe Ring system
Describe how handling overlapping icons
Complete getting all data into their own html elements
Strict mode utilised and problems dealth with
Exclude 'bus stops' with no routes serving them
Handle duplicates caused by not removing old entries
Add fake positioning because geolocation regulalrly failing on desktop

29 April 2017
30 April 2017
Remove data associated with a bus stop if that bus stop disappears
Correct html id tags not consistent across reloads
Use of '@' for bus stops without stop letters
Use of sans-serif

1 May 2017
Taking those user's own bearing into account not part of original plan
  - absolutely perfect reason for mandatory feature creep
Add bus routes into middle ring
Account for logarithmic distance too - relearn maths

2 May 2017
Observations that there are still attack vectors for this, a 'read-only'
	     project.
Deal with smelly code, including big reorganisation of the source
Observations about the same thing having different names
Observation that test support code is better off in the same file for now
Support for using user's heading
Support for a simple algorithm bumping divs that overlap
Support for manual rotate of heading

3 May 2017