eztfl-html5 thoughts			Alistair Mann
==============================================================================

2017-04-20 14:30
Following on from the eztfl website (http://eztfl.pectw.net) where I recreated
the original TFL Countdown benefits in a pure html site, I discover another
scratch to itch: I want the site to tell me what bus stops are in front of me
given my position and location.

The original site was specifically created to be purely server-side but
particularly fast. However geolocation - the technology required to for
this new purpose - is client-side; further, the user would be specifically
trading processing speed for application intelligence: he wants to know
what his options Will Be, not What They Are. As this is diametrically
opposed to the original site's design goals, it's warranted we start an
whole new project instead.

The second thing a project needs, after the itch to scratch, is a name. The
original name was "eztfl", the new project will rely on html5 principles,
so how about we use eztfl-html5. There! That took all of a few seconds.

It looks like I'll be doing this publically as well, so I'll start recording
development (in this file, "eztfl-html5 thoughts") and a diary ("eztfl-html5
diary")

Project goals in depth.
eztfl.pectw.net answers the question: "I'm at bus stop X. What are my options?"
eztfl-html5 is to answer the question: "I'm at X, Y walking in direction Z. What
are my options?"
I'm interested in creating this not as an app (of which there are plenty) but
as a website. This has a far lower barrier to entry than creating apps (Which
includes $100+ for distributing Android or iOS apps, plus cost of powerful
machinery; where website development & distribution can be free.) More
importantly, support for browsers would logically be more extensive than
support for apps: an old and cheap phone would likely support html and
javascript better than it could support a modern app.

2017-04-20 14:55
Introducing TFL.
The task here is about London, England and her famous red buses. Public
transport is handled by TFL - Transport for London - who have a very
enlightened approach to their data, including a RESTful API for obtaining
"Countdown" info: which buses are arriving at any given bus stop in the
next 30 minutes.

Introducing me as dev and the tools I'll use.
I've been programming since 1979 including games, financial sector software
and business software. I find myself in posession of a public-facing website,
domains, DNS control and SSL certificates which means I can put most things
up. I've written server-side software before, more recently using PHP. I've
also written websites in html and html5, and client-side software most
recently using Javascript. I've connected the client-side to the server-side
and back again using AJAX principles. I've also connected clients to servers
using RESTful principles, although I may not need them here. Finally, I've
also done some work in securing software, so I'll look to bake that in as
we go.

So we'll see a 'stack' that looks like this:

client: HTML5/CSS
	JavaScript
	    ^
	    | (Maybe RESTful)
	    V
Server: PHP
	    ^
	    | (Definitely RESTful)
	    V
TFL:    API

Constraint: HTTPS
I happen to know beforehand that geolocation requires the use of HTTPS from
Chrome v50 released around April 2016. I'll look to honour that even if the
browser used is not Chrome, so using HTTPS is an immediate constraint.
2017-04-20 15:18

2017-04-20 20:45
As I'm wanting to do this publicaly, it's appropriate to put this stuff on
github. I already have one, so what I got so far can go there

2017-04-20 21:00
That only took a few minutes :-) Existing project now found at:
     https://github.com/Csi18nAlistairMann/eztfl-html5
Upto the github migration I was the Kate Editor
(https://kate-editor.org/about-kate/) for basic text editing. Now I'm in a
local repository of this as github project, I'm using emacs on the command
line - my usual preference when programming.
     I'm not used to github. In fact I'm not used to much of git, so spent
some faffing these documents into an acceptable upload.
     Also annoying is having to add un/pw pair for each github exchange. I
thought I had added my ssh key already? Fix that too. Apparently not, so
upload muh public key to github, and test.
       So, even as a technical user, it sitll took me an hour to fully
migrate from two local files to a github (gh) project largely due to my
own limited understanding of git and gh
    1. create repo online
    2. clone it to local repo
    3. copy local text files to local repo
    4. faff with branch to upload
    5. faff with pull request and merge
    6. faff with un/pw in favour of key authentication
    7. faff with pulling back down
2017-04-20 21:44
Would be of interest to others to have a resources file. Create one at
      docs/eztfl-html5\ resources

Target platforms:
Now I know I mentioned earlier that the target isn't the device but the
browser. Despite that, it's worth you knowing what I'll be working with
here. ALL the hardware used for development of this project is old, at
least 2 years old. Where possible though, they are using the latest
freely available software. I want to push that one doesn't have to spend
alot to develop!
That said, their geolocation capabilities are not yet known. We'll come
to that shortly.

2017-04-20 22:06
	  It's worth mentioning that there are some things I don't care
about for this project. One is the css displayport. It's incidental to
the purpose of this project that it fits perfectly on the screens of
arbitrary devices. As such, I'll assume a resolution of 1136x640.
	  It's also obvious now that I'm building a picture of What
The Project will look like, and that's in part dependent on what I have
to hand, and what I know. A new file is coming that describes that
at that date, rather than the organic description in here. We'll call it
docs/Goals
	I'll also rename this, the diary and the resources file. Having
eztfl-html5 in the name is redundant.
2017-04-20 22:34

Time for a tea.

2017-04-20 22:46
We aren't sure the project is achievable:
   At this point I don't know if my devices have hardware capable of
supporting success; I don't know if they do but lack JavaScript facilities
to assist. But then someone else doing exactly the same thing might
not have known geolocation wouldn't work without an https facility
so may fail because he couldn't afford/ configure one.
   The point is, there is a high degree of risk the project will have
to be abandoned. This is ameliorated by some research that will happen
first.

What constitutes project success?
     To start with, it may seem weird to define what success is when we
don't yet know whether we have what we need to reach the goal. However the
definition of success is plastic: when we know more about the goal, we can
in future what defines success. This is similar to a long drive: we might
choose to visit Alice & Bob and start by getting to their city before we
redefine success to getting to their neighbourhood, street and door. If
on the way we learn they're in the middle of Zombie outbreak, we might
reasonably redefine success to mean we'll visit Carol & David in a
different city instead. The trip will be a success, even if we don't end
up exactly where we first hoped.

   Consider the following diagram:

		   ._uvvvvnc,
		 _uv!~     ^?nc.
	       .ue~          -"S;
	      _d^ __i__.        4c.
	     <2~<oY^^"!1o,       "6.
	    .2<2"`      -Ya.      )c
	   .Jh?`          )nc      4;
	   )#^.___,         4;     -n.
	  .dCu3!""Yn;       =o.     )c
	  )#d^      4;       )c      S.
	  d#^       -4c       S.     );
	 _Q(          4;      )c     :C
	 ]F___,       :C       C      v
	 jk^ .";       n.      n.     3;
	 Q'    -c      );      );     =;
	 W      <      =;      =;     );
   A->Z  W  B   )  C    );  D   ); E   =;
	 W      )      =;      =;     =(
	 Q/    _^      j'      );     );
	 ]k,.._+      .z       v`     v`
	 ]m+""~       )(      .o     .o
	 -Wa.        =2       )(     =(
	  426.      <2`      .2      j'
	  =m)o_.  _se        )(     :e
	   3L-!1vn?^        :2      j'
	   :Q/             .J'     =e
	    )&a.          =d^     :2`
	     32nc.      _uY      .d'
	      ?u!1a___az?~      <2^
	       )o,~"""^       .<2
		-Ya_.       _v2"`
		  -!1o___i<z?^
		     ~""""^

In my mind, I have a user at position X, Y (A) walking in direction Z. In
a minute he'll be somewhere within range of B. A minute later, he could be
anywhere in range of C. After four minutes he could be anywhere in the
circle marking the range of E.

Knowing the location and radius of B, C, D, and E I imagine discovering
the bus stops within each and obtaining some basic data about them such
as direction of travel and bus routes stopping by, I then imagine
presenting these to the user in a list ordered by distance from A.

I imagine that this would answer the question above: "I'm at X, Y walking
in direction Z. What are my options?", and answering that question
constitutes project success.

There are degrees of leeway. What if I can't do circles, but can do pie
segments? That might be good enough. What if I can't calculate direction
can I take user guesses? (Think: "Are you moving North at 3mph?") That
might also be good enough. As I understand the technology further we may
redefine what consitutes project success.

2017-04-20 23:31

Is this project even possible?

A reasonable person should be able to look within themselves and identify
Known Knowns and Known Unknowns, in Donald Rumsfelds immortal words.
(https://en.wikipedia.org/wiki/There_are_known_knowns) It's a known that
I know html, php, ssh etcetera. It's an unknown that my equipment can
handle the project. Unknown Unknowns just have to await uncovering.

So the task is to list Known Unknowns for the first stage of the project:
Make the Unknowns Known, and adjust the project to suit. For eztfl-html5
my Known Unknowns are:

1. Can I have JavaScript capture:
   a: position
   b: direction of travel
   c: speed of travel
2. Can this capturing work on available devices:
   a. LG G2
   b. iPhone 5s
   c. iPad Air 2
   d. a standard desktop browser
3. Can this data be used to calculate likely ranges for future positions
4. Can these ranges be used to interrogate the TFL API
5. Given the answers above, should project goals be revisited?

2017-04-20 23:45

Notice that so far I have written:
   31    71   513 Resources
   31   186  1253 Diary
  239  1696 10397 Thoughts
   21   114   731 Goals
    1     1     3 .gitignore
  323  2068 12897 total

12kb of files, including 2000 words across 323 lines with ZERO code.

2017-04-20 23:54

Plan for handling Known Unknowns.
1. Questions of JavaScript capturing geolocation data is already known to be
   governed by HTTPS on Chrome. So before we issue JavaScript, we need an
   HTTPS domain to issue it from.
   Fortunately I have an existing catch-all cert for *.mpsvr.com, so I can
   start there:
   [x] Create https://eztfl-html5.mpsvr.com
     [x] DNS
     [x] Apache
2. The JavaScript to be issued appears at
   https://www.w3schools.com/html/html5_geolocation.asp with a strong
   suggestion from .latitude, .longitude, .heading and .speed are all
   available - if allowed on the device, and available from the hardware.
   [ ] Recreate the JavaScript examples to answer the position, speed and
       heading question
3. Using the page just created, examine the response from the various
   devices to answer the second Known Unknown
4. What maths is needed to discover a possible position and radius using
   the above data? My very distant memory of writing 3D games (I never
   did, only looked into it when Original Doom came out in 1993) was that
   maths will likely involve sin, cos, tan, radians: trigonometry. Indeed
   a quick google suggests this might be a common question:
   http://stackoverflow.com/questions/2187657/calculate-second-point-knowing-the-starting-point-and-distance
   where we find cos and sin in the first answer.
	 [ ] Frame the mathematical question for calculating position and
	     radius from position, speed and bearing
	 [ ] Get maths
	 [ ] Is this maths better done client-side or server-side?
5. Can the TFL API support position and radius for discovering what bus
   stops are nearby? The docs at:
   https://api.tfl.gov.uk/swagger/ui/index.html?url=/swagger/docs/v1#!/StopPoint/StopPoint_GetByGeoPoint
   say "Gets a list of StopPoints within {radius} by the specified criteria"
   which includes a radius default of 200m from location.lat, location.lon.
   This seems very likely what is needed.
   [ ] How to interrogate above
6. [ ] Reassess project in light of above answers.

Unknown Unknown #1: To set up Apache properly, I had to provide a server
admin email address.

2017-04-21 00:51

[ ] Unknown Unknown #2: I have put a hello world page at
https://eztfl-html5.mpsvr.com but it will shortly contain code: how does
one handle that I want it to contain code that will be published at gh?
Can one set up a pull of only certain parts of the tree? How? Something
for tomorrow!

2017-04-21 11:19

Known Unknown #2: We now want JavaScript to indicate position, heading
and speed in a browser. We will also want to see that change as we go, so
the page will follow the three over time.
[x] Prove that we can obtain the data.
  We'll do this by copying in the example code.
	[x] Code with lat and lon works fine on G2
	[x] Extend to include accuracy, speed and heading
	Unknown Unknown #3: accuracy is available too
	[x] Speed and heading are both "null" on portable devices.
	    This may be because I'm walking around a room, but why is
	    it not "0"? Anwser: because the speed is not available at
	    all, not 0 because of an error

[x] Prove that we can follow the data. This is a trivial task so
    doesn't need proving.

Unknown unknown #4: "null" means not available, "undefined" is used for
	mispellings
	IDK if "null" also used for 0 speed and in what circumstances

2017-04-21 11:43

All these unknown unknowns might also be useful at other points in
the project as they're revealing behaviour that might fuel later
changes. To that end I've started collecting them in
docs/UnknownUnknowns

Unknown unknown #5: documentation and testing thus far suggests that
speed and heading are not always available. It occurs to me that the
project could use a timed succession of co-ordinates to extrapolate
both

2017-04-21 12:11

I'm stymied by the availability or otherwise of actual heading and
speed data from my devices - they all report null from just walking
about. So I'm off to sit on a bus and let it do the work.

2017-04-21 13:00

About 15 minutes actual work.
I didn't get on the bus as the target of the project is users walking
towards bus stops, so I walked instead of rode.
None of the portable devices gave heading and speed at any point.
Unknown unknown #6: The iPhone 5s and iPad did not give an accuracy
below 65m at any point. Adding credit to it's account made no difference
too.

It would seem that either:
+ none of my hardware natively reports speed and heading;
+ speed and heading is not reported by the hardware but tracked by
  the software and uu2.html doesn't activate that feature;
At worst, I'll still have the manual backup.
It would seem to be the first. When trying
https://www.audero.it/demo/geolocation-api-demo.html
speed and heading are both correct on a borrowed LG LV2 & a
Samsung Galaxy J5, both recent devices. The same page offers nothing
for my devices. To proceed, then, means to create the manual alternative
for my own devices as a fall back for newer devices not being present.
Unknown unknown #7: code to support old phones, or abandon them.

2017-04-21 13:49

Unknown unknown #7: code to support old phones, or abandon them.
Knowing that at Time T1 the position was X1, Y1 and at T2 the position
changed to X2, Y2 what calculation gives us heading and speed?
Heading - as bearing - seems to be offered at
http://www.movable-type.co.uk/scripts/latlong.html
https://math.stackexchange.com/questions/1596513/find-the-bearing-angle-between-two-points-in-a-2d-space/
The former being more appropriate for huge distances, the second
better for far smaller distances. Let's calculate what answers we
should expect.
Using http://www.geomidpoint.com/destination/ to obtain:
Highbury & Islington tube station is 51.54647680000001, -0.10431170000003931
Arsenal's Emirates Stadium is at 51.5548885, -0.10843799999997827
At https://www.sunearthtools.com/tools/distance.php plugging those
coords in reports a bearing of 343.04deg.
Using https://www.google.co.uk to double check, we get a very similar
angle when looking 'by hand'. So we want:
bearing(51.54647680000001, -0.10431170000003931, 51.5548885, -0.10843799999997827) {
  ...
  return 343.04;
}

I'll copy uu2.html to uu7.html and modify the javascript to create
this function. This is pure lazyness - it saves me handling overhead
programming and coding as I'm reusing uu2.html's overhead. Once
done, we have code that should manually inform on bearing, proving
that Unknown Unknown #7 is in part addressable before project continues.

Looking at the code I see a constant TWOPI: 6.2831853071795865. Is this
number associated with this kind of work? It's certainly PI * 2 and
googling "6.2831853071795865 bearing" does seem to bring up references
to this constant for this work. The second constant, RAD2DEG also
googles up for quite a bit of use with radians and degrees. So I don't
know how this second constant is arrived at, or how either were
originally worked out, but I'm happy I don't need to in order to use
their properties effectively. This completes the due diligence that
the routine being used is likely to be effective.

At first blush it looks like the code provided accepts coords in the
double form provided. Let's run and see.
1. Doesn't work move script to <head /> and retest
2. Doesn't work. F12 to see error in alert() use. Fix and retest
3. Doesn't worl. F12 to see atan2 not defined. Change to Math.atan2
   and retest
4. Wrong answer: get 63.870066427646954 when expected 343.04. Adding
   both is 406, so this isn't just going the wrong way around the
   clock that would be expected if the answer was 360.
5. Could this be me providing arguments in the wrong order?
   C++, the example code has atan2 given y, then x.
   Check shows I've not changed argument order.
6. I notice warning that in the example, Y increases the further
   down one goes. Could it be that I need to invert Y?
   Change sign of both Y arguments and retest. Get result
   116.12993357235304, so not because Y needed sign changing.
7. That makes me think that this example code was not appropriate
   to this task. Either I don't understand the task, or I don't
   understand the example.

Googling some more I come across:
https://gis.stackexchange.com/questions/29239/calculate-bearing-between-two-decimal-gps-coordinates
Using it as a drop-in replacement I get the answer 343.0366983003317
which is perfect.

What's happened here is that I'm treating the code as a Black Box.
I don't know, nor need to know how it works (other than due
diligence that it's not going to be malign), I just need to know
that it does work when called.

I'll invent a second test.
Sydney Opera House is at -33.858667, 151.214028 according to
Wikipedia and confirmed at maps.google.com. The nearby attraction
Mrs Maquarie's Chair, is at -33.859467, 151.222203. What's the
bearing? It looks like 120deg to me. Plugging the coords in
I get 96.72099553985117 which is some way off. Maybe I got the
coords wrong? No. The coords provided by Wiki are someway South
and North of what the map appears to show, and 96deg does seem
accurate. Let's check both back at
https://www.sunearthtools.com/tools/distance.php where we expect
a similar answer. We get 96.72deg.

So the code to get the bearing manually, found in uu7.html and
shamlessly ripped off of Francisco Valdez at the above SE link
is sufficient to resolve that part of Unknown Unknown #7.

2017-04-21 15:07

The second part is to manually determine speed. There would seem
to be a very similar algorithm: look at the distance covered by
the two points then divide by the time taken to travel it. So:
distance(x1, y1, x2, y2){
  return meters
}
speed(meters, seconds){
  return meters-per-second
}
The first as an SE link at
http://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula

Dropping it in to uu7.html and with the examples above I get
a distance of 0.9778843260636695km and 0.7600819724022814km
respectively when I was expecting a result of 978.2m and 760.3m
so the code is right on the money again.

Knowing the meters travelled and the seconds taken, it's trivial
to calculate the meters-per-second for speed so I'll take those
as given and conside Unknown Unknown #7 addressed.

Unknown Unknown #3 gets an update: we have code to manually
calculate heading and speed if required.

Unknown Unknown #5 gets an update: we have code to manually
calculate heading and speed if required.

Unknown Unknown #7 gets an update: we have code to manually
calculate heading and speed if required.

2017-04-21 15:28

2017-04-21 15:45
Unknown Unknown #2: What configuration sees the server only
retrieve certain files from github

My objective here is that the files on the server are also
available through gh. However, I do not want any but specific
files to be available. What to do?

2017-04-21 15:50

2017-04-21 17:05

In the normal course of events, I would hold the development tree
on a development machine. Updates would be run through unit tests
and once accepted pushed out to a Gold machine with a non-visible
account and a batch file that copies live code from the repo
into place in the visible account.

This is not that kind of a project though. Instead, I'll copy
live code on the server into test file and edit it in updates
there. Should the edits be good, the files get swapped around.
If not, they get deleted.

This can be done because the project is not "live" in the sense
the public is using it.

As development is being done on a live server, even if not the
final live server, the connection to gh can be done instead as a
pull: develop on the server -> test on a device -> scp files to
development machine repo -> push to gh.

So let's add the hello world index file and two Unknown Unknowns
files we've create thus far.
