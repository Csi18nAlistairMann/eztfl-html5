eztfl-html5 thoughts			Alistair Mann
==============================================================================

2017-04-20 14:30
Following on from the eztfl website (http://eztfl.pectw.net) where I recreated
the original TFL Countdown benefits in a pure html site, I discover another
scratch to itch: I want the site to tell me what bus stops are in front of me
given my position and location.

The original site was specifically created to be purely server-side but
particularly fast. However geolocation - the technology required to for
this new purpose - is client-side; further, the user would be specifically
trading processing speed for application intelligence: he wants to know
what his options Will Be, not What They Are. As this is diametrically
opposed to the original site's design goals, it's warranted we start an
whole new project instead.

The second thing a project needs, after the itch to scratch, is a name. The
original name was "eztfl", the new project will rely on html5 principles,
so how about we use eztfl-html5. There! That took all of a few seconds.

It looks like I'll be doing this publically as well, so I'll start recording
development (in this file, "eztfl-html5 thoughts") and a diary ("eztfl-html5
diary")

Project goals in depth.
eztfl.pectw.net answers the question: "I'm at bus stop X. What are my options?"
eztfl-html5 is to answer the question: "I'm at X, Y walking in direction Z. What
are my options?"
I'm interested in creating this not as an app (of which there are plenty) but
as a website. This has a far lower barrier to entry than creating apps (Which
includes $100+ for distributing Android or iOS apps, plus cost of powerful
machinery; where website development & distribution can be free.) More
importantly, support for browsers would logically be more extensive than
support for apps: an old and cheap phone would likely support html and
javascript better than it could support a modern app.

2017-04-20 14:55
Introducing TFL.
The task here is about London, England and her famous red buses. Public
transport is handled by TFL - Transport for London - who have a very
enlightened approach to their data, including a RESTful API for obtaining
"Countdown" info: which buses are arriving at any given bus stop in the
next 30 minutes.

Introducing me as dev and the tools I'll use.
I've been programming since 1979 including games, financial sector software
and business software. I find myself in posession of a public-facing website,
domains, DNS control and SSL certificates which means I can put most things
up. I've written server-side software before, more recently using PHP. I've
also written websites in html and html5, and client-side software most
recently using Javascript. I've connected the client-side to the server-side
and back again using AJAX principles. I've also connected clients to servers
using RESTful principles, although I may not need them here. Finally, I've
also done some work in securing software, so I'll look to bake that in as
we go.

So we'll see a 'stack' that looks like this:

client: HTML5/CSS
	JavaScript
	    ^
	    | (Maybe RESTful)
	    V
Server: PHP
	    ^
	    | (Definitely RESTful)
	    V
TFL:    API

Constraint: HTTPS
I happen to know beforehand that geolocation requires the use of HTTPS from
Chrome v50 released around April 2016. I'll look to honour that even if the
browser used is not Chrome, so using HTTPS is an immediate constraint.
2017-04-20 15:18

2017-04-20 20:45
As I'm wanting to do this publicaly, it's appropriate to put this stuff on
github. I already have one, so what I got so far can go there

2017-04-20 21:00
That only took a few minutes :-) Existing project now found at:
     https://github.com/Csi18nAlistairMann/eztfl-html5
Upto the github migration I was the Kate Editor
(https://kate-editor.org/about-kate/) for basic text editing. Now I'm in a
local repository of this as github project, I'm using emacs on the command
line - my usual preference when programming.
     I'm not used to github. In fact I'm not used to much of git, so spent
some faffing these documents into an acceptable upload.
     Also annoying is having to add un/pw pair for each github exchange. I
thought I had added my ssh key already? Fix that too. Apparently not, so
upload muh public key to github, and test.
       So, even as a technical user, it sitll took me an hour to fully
migrate from two local files to a github (gh) project largely due to my
own limited understanding of git and gh
    1. create repo online
    2. clone it to local repo
    3. copy local text files to local repo
    4. faff with branch to upload
    5. faff with pull request and merge
    6. faff with un/pw in favour of key authentication
    7. faff with pulling back down
2017-04-20 21:44
Would be of interest to others to have a resources file. Create one at
      docs/eztfl-html5\ resources

Target platforms:
Now I know I mentioned earlier that the target isn't the device but the
browser. Despite that, it's worth you knowing what I'll be working with
here. ALL the hardware used for development of this project is old, at
least 2 years old. Where possible though, they are using the latest
freely available software. I want to push that one doesn't have to spend
alot to develop!
That said, their geolocation capabilities are not yet known. We'll come
to that shortly.

2017-04-20 22:06
	  It's worth mentioning that there are some things I don't care
about for this project. One is the css displayport. It's incidental to
the purpose of this project that it fits perfectly on the screens of
arbitrary devices. As such, I'll assume a resolution of 1136x640.
	  It's also obvious now that I'm building a picture of What
The Project will look like, and that's in part dependent on what I have
to hand, and what I know. A new file is coming that describes that
at that date, rather than the organic description in here. We'll call it
docs/Goals
	I'll also rename this, the diary and the resources file. Having
eztfl-html5 in the name is redundant.
2017-04-20 22:34

Time for a tea.

2017-04-20 22:46
We aren't sure the project is achievable:
   At this point I don't know if my devices have hardware capable of
supporting success; I don't know if they do but lack JavaScript facilities
to assist. But then someone else doing exactly the same thing might
not have known geolocation wouldn't work without an https facility
so may fail because he couldn't afford/ configure one.
   The point is, there is a high degree of risk the project will have
to be abandoned. This is ameliorated by some research that will happen
first.

What constitutes project success?
     To start with, it may seem weird to define what success is when we
don't yet know whether we have what we need to reach the goal. However the
definition of success is plastic: when we know more about the goal, we can
in future what defines success. This is similar to a long drive: we might
choose to visit Alice & Bob and start by getting to their city before we
redefine success to getting to their neighbourhood, street and door. If
on the way we learn they're in the middle of Zombie outbreak, we might
reasonably redefine success to mean we'll visit Carol & David in a
different city instead. The trip will be a success, even if we don't end
up exactly where we first hoped.

   Consider the following diagram:

		   ._uvvvvnc,
		 _uv!~     ^?nc.
	       .ue~          -"S;
	      _d^ __i__.        4c.
	     <2~<oY^^"!1o,       "6.
	    .2<2"`      -Ya.      )c
	   .Jh?`          )nc      4;
	   )#^.___,         4;     -n.
	  .dCu3!""Yn;       =o.     )c
	  )#d^      4;       )c      S.
	  d#^       -4c       S.     );
	 _Q(          4;      )c     :C
	 ]F___,       :C       C      v
	 jk^ .";       n.      n.     3;
	 Q'    -c      );      );     =;
	 W      <      =;      =;     );
   A->Z  W  B   )  C    );  D   ); E   =;
	 W      )      =;      =;     =(
	 Q/    _^      j'      );     );
	 ]k,.._+      .z       v`     v`
	 ]m+""~       )(      .o     .o
	 -Wa.        =2       )(     =(
	  426.      <2`      .2      j'
	  =m)o_.  _se        )(     :e
	   3L-!1vn?^        :2      j'
	   :Q/             .J'     =e
	    )&a.          =d^     :2`
	     32nc.      _uY      .d'
	      ?u!1a___az?~      <2^
	       )o,~"""^       .<2
		-Ya_.       _v2"`
		  -!1o___i<z?^
		     ~""""^

In my mind, I have a user at position X, Y (A) walking in direction Z. In
a minute he'll be somewhere within range of B. A minute later, he could be
anywhere in range of C. After four minutes he could be anywhere in the
circle marking the range of E.

Knowing the location and radius of B, C, D, and E I imagine discovering
the bus stops within each and obtaining some basic data about them such
as direction of travel and bus routes stopping by, I then imagine
presenting these to the user in a list ordered by distance from A.

I imagine that this would answer the question above: "I'm at X, Y walking
in direction Z. What are my options?", and answering that question
constitutes project success.

There are degrees of leeway. What if I can't do circles, but can do pie
segments? That might be good enough. What if I can't calculate direction
can I take user guesses? (Think: "Are you moving North at 3mph?") That
might also be good enough. As I understand the technology further we may
redefine what consitutes project success.

2017-04-20 23:31

Is this project even possible?

A reasonable person should be able to look within themselves and identify
Known Knowns and Known Unknowns, in Donald Rumsfelds immortal words.
(https://en.wikipedia.org/wiki/There_are_known_knowns) It's a known that
I know html, php, ssh etcetera. It's an unknown that my equipment can
handle the project. Unknown Unknowns just have to await uncovering.

So the task is to list Known Unknowns for the first stage of the project:
Make the Unknowns Known, and adjust the project to suit. For eztfl-html5
my Known Unknowns are:

1. Can I have JavaScript capture:
   a: position
   b: direction of travel
   c: speed of travel
2. Can this capturing work on available devices:
   a. LG G2
   b. iPhone 5s
   c. iPad Air 2
   d. a standard desktop browser
3. Can this data be used to calculate likely ranges for future positions
4. Can these ranges be used to interrogate the TFL API
5. Given the answers above, should project goals be revisited?

2017-04-20 23:45

Notice that so far I have written:
   31    71   513 Resources
   31   186  1253 Diary
  239  1696 10397 Thoughts
   21   114   731 Goals
    1     1     3 .gitignore
  323  2068 12897 total

12kb of files, including 2000 words across 323 lines with ZERO code.

2017-04-20 23:54

Plan for handling Known Unknowns.
1. Questions of JavaScript capturing geolocation data is already known to be
   governed by HTTPS on Chrome. So before we issue JavaScript, we need an
   HTTPS domain to issue it from.
   Fortunately I have an existing catch-all cert for *.mpsvr.com, so I can
   start there:
   [x] Create https://eztfl-html5.mpsvr.com
     [x] DNS
     [x] Apache
2. The JavaScript to be issued appears at
   https://www.w3schools.com/html/html5_geolocation.asp with a strong
   suggestion from .latitude, .longitude, .heading and .speed are all
   available - if allowed on the device, and available from the hardware.
   [x] Recreate the JavaScript examples to answer the position, speed and
       heading question
3. Using the page just created, examine the response from the various
   devices to answer the second Known Unknown.
	   This got answered along the way - we know that iOS has the 65m
   problem, for instance.
4. What maths is needed to discover a possible position and radius using
   the above data? My very distant memory of writing 3D games (I never
   did, only looked into it when Original Doom came out in 1993) was that
   maths will likely involve sin, cos, tan, radians: trigonometry. Indeed
   a quick google suggests this might be a common question:
   http://stackoverflow.com/questions/2187657/calculate-second-point-knowing-the-starting-point-and-distance
   where we find cos and sin in the first answer.
	 [x] Frame the mathematical question for calculating position and
	     radius from position, speed and bearing
	 [x] Get maths
	 [x] Is this maths better done client-side or server-side?
5. Can the TFL API support position and radius for discovering what bus
   stops are nearby? The docs at:
   https://api.tfl.gov.uk/swagger/ui/index.html?url=/swagger/docs/v1#!/StopPoint/StopPoint_GetByGeoPoint
   say "Gets a list of StopPoints within {radius} by the specified criteria"
   which includes a radius default of 200m from location.lat, location.lon.
   This seems very likely what is needed.
   [x] How to interrogate above
6. [x] Reassess project in light of above answers.

Unknown Unknown #1: To set up Apache properly, I had to provide a server
admin email address.

2017-04-21 00:51

[x] Unknown Unknown #2: I have put a hello world page at
https://eztfl-html5.mpsvr.com but it will shortly contain code: how does
one handle that I want it to contain code that will be published at gh?
Can one set up a pull of only certain parts of the tree? How? Something
for tomorrow!

2017-04-21 11:19

Known Unknown #2: We now want JavaScript to indicate position, heading
and speed in a browser. We will also want to see that change as we go, so
the page will follow the three over time.
[x] Prove that we can obtain the data.
  We'll do this by copying in the example code.
	[x] Code with lat and lon works fine on G2
	[x] Extend to include accuracy, speed and heading
	Unknown Unknown #3: accuracy is available too
	[x] Speed and heading are both "null" on portable devices.
	    This may be because I'm walking around a room, but why is
	    it not "0"? Anwser: because the speed is not available at
	    all, not 0 because of an error

[x] Prove that we can follow the data. This is a trivial task so
    doesn't need proving.

Unknown unknown #4: "null" means not available, "undefined" is used for
	mispellings
	IDK if "null" also used for 0 speed and in what circumstances

2017-04-21 11:43

All these unknown unknowns might also be useful at other points in
the project as they're revealing behaviour that might fuel later
changes. To that end I've started collecting them in
docs/UnknownUnknowns

Unknown unknown #5: documentation and testing thus far suggests that
speed and heading are not always available. It occurs to me that the
project could use a timed succession of co-ordinates to extrapolate
both

2017-04-21 12:11

I'm stymied by the availability or otherwise of actual heading and
speed data from my devices - they all report null from just walking
about. So I'm off to sit on a bus and let it do the work.

2017-04-21 13:00

About 15 minutes actual work.
I didn't get on the bus as the target of the project is users walking
towards bus stops, so I walked instead of rode.
None of the portable devices gave heading and speed at any point.
Unknown unknown #6: The iPhone 5s and iPad did not give an accuracy
below 65m at any point. Adding credit to it's account made no difference
too.

It would seem that either:
+ none of my hardware natively reports speed and heading;
+ speed and heading is not reported by the hardware but tracked by
  the software and uu2.html doesn't activate that feature;
At worst, I'll still have the manual backup.
It would seem to be the first. When trying
https://www.audero.it/demo/geolocation-api-demo.html
speed and heading are both correct on a borrowed LG LV2 & a
Samsung Galaxy J5, both recent devices. The same page offers nothing
for my devices. To proceed, then, means to create the manual alternative
for my own devices as a fall back for newer devices not being present.
Unknown unknown #7: code to support old phones, or abandon them.

2017-04-21 13:49

Unknown unknown #7: code to support old phones, or abandon them.
Knowing that at Time T1 the position was X1, Y1 and at T2 the position
changed to X2, Y2 what calculation gives us heading and speed?
Heading - as bearing - seems to be offered at
http://www.movable-type.co.uk/scripts/latlong.html
https://math.stackexchange.com/questions/1596513/find-the-bearing-angle-between-two-points-in-a-2d-space/
The former being more appropriate for huge distances, the second
better for far smaller distances. Let's calculate what answers we
should expect.
Using http://www.geomidpoint.com/destination/ to obtain:
Highbury & Islington tube station is 51.54647680000001, -0.10431170000003931
Arsenal's Emirates Stadium is at 51.5548885, -0.10843799999997827
At https://www.sunearthtools.com/tools/distance.php plugging those
coords in reports a bearing of 343.04deg.
Using https://www.google.co.uk to double check, we get a very similar
angle when looking 'by hand'. So we want:
bearing(51.54647680000001, -0.10431170000003931, 51.5548885, -0.10843799999997827) {
  ...
  return 343.04;
}

I'll copy uu2.html to uu7.html and modify the javascript to create
this function. This is pure lazyness - it saves me handling overhead
programming and coding as I'm reusing uu2.html's overhead. Once
done, we have code that should manually inform on bearing, proving
that Unknown Unknown #7 is in part addressable before project continues.

Looking at the code I see a constant TWOPI: 6.2831853071795865. Is this
number associated with this kind of work? It's certainly PI * 2 and
googling "6.2831853071795865 bearing" does seem to bring up references
to this constant for this work. The second constant, RAD2DEG also
googles up for quite a bit of use with radians and degrees. So I don't
know how this second constant is arrived at, or how either were
originally worked out, but I'm happy I don't need to in order to use
their properties effectively. This completes the due diligence that
the routine being used is likely to be effective.

At first blush it looks like the code provided accepts coords in the
double form provided. Let's run and see.
1. Doesn't work move script to <head> and retest
2. Doesn't work. F12 to see error in alert() use. Fix and retest
3. Doesn't worl. F12 to see atan2 not defined. Change to Math.atan2
   and retest
4. Wrong answer: get 63.870066427646954 when expected 343.04. Adding
   both is 406, so this isn't just going the wrong way around the
   clock that would be expected if the answer was 360.
5. Could this be me providing arguments in the wrong order?
   C++, the example code has atan2 given y, then x.
   Check shows I've not changed argument order.
6. I notice warning that in the example, Y increases the further
   down one goes. Could it be that I need to invert Y?
   Change sign of both Y arguments and retest. Get result
   116.12993357235304, so not because Y needed sign changing.
7. That makes me think that this example code was not appropriate
   to this task. Either I don't understand the task, or I don't
   understand the example.

Googling some more I come across:
https://gis.stackexchange.com/questions/29239/calculate-bearing-between-two-decimal-gps-coordinates
Using it as a drop-in replacement I get the answer 343.0366983003317
which is perfect.

What's happened here is that I'm treating the code as a Black Box.
I don't know, nor need to know how it works (other than due
diligence that it's not going to be malign), I just need to know
that it does work when called.

I'll invent a second test.
Sydney Opera House is at -33.858667, 151.214028 according to
Wikipedia and confirmed at maps.google.com. The nearby attraction
Mrs Maquarie's Chair, is at -33.859467, 151.222203. What's the
bearing? It looks like 120deg to me. Plugging the coords in
I get 96.72099553985117 which is some way off. Maybe I got the
coords wrong? No. The coords provided by Wiki are someway South
and North of what the map appears to show, and 96deg does seem
accurate. Let's check both back at
https://www.sunearthtools.com/tools/distance.php where we expect
a similar answer. We get 96.72deg.

So the code to get the bearing manually, found in uu7.html and
shamlessly ripped off of Francisco Valdez at the above SE link
is sufficient to resolve that part of Unknown Unknown #7.

2017-04-21 15:07

The second part is to manually determine speed. There would seem
to be a very similar algorithm: look at the distance covered by
the two points then divide by the time taken to travel it. So:
distance(x1, y1, x2, y2){
  return meters
}
speed(meters, seconds){
  return meters-per-second
}
The first as an SE link at
http://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula

Dropping it in to uu7.html and with the examples above I get
a distance of 0.9778843260636695km and 0.7600819724022814km
respectively when I was expecting a result of 978.2m and 760.3m
so the code is right on the money again.

Knowing the meters travelled and the seconds taken, it's trivial
to calculate the meters-per-second for speed so I'll take those
as given and conside Unknown Unknown #7 addressed.

Unknown Unknown #3 gets an update: we have code to manually
calculate heading and speed if required.

Unknown Unknown #5 gets an update: we have code to manually
calculate heading and speed if required.

Unknown Unknown #7 gets an update: we have code to manually
calculate heading and speed if required.

2017-04-21 15:28

2017-04-21 15:45
Unknown Unknown #2: What configuration sees the server only
retrieve certain files from github

My objective here is that the files on the server are also
available through gh. However, I do not want any but specific
files to be available. What to do?

2017-04-21 15:50

2017-04-21 17:05

In the normal course of events, I would hold the development tree
on a development machine. Updates would be run through unit tests
and once accepted pushed out to a Gold machine with a non-visible
account and a batch file that copies live code from the repo
into place in the visible account.

This is not that kind of a project though. Instead, I'll copy
live code on the server into test file and edit it in updates
there. Should the edits be good, the files get swapped around.
If not, they get deleted.

This can be done because the project is not "live" in the sense
the public is using it.

As development is being done on a live server, even if not the
final live server, the connection to gh can be done instead as a
pull: develop on the server -> test on a device -> scp files to
development machine repo -> push to gh.

So let's add the hello world index file and two Unknown Unknowns
files we've create thus far.

2017-04-21 17:05

One may notice that I've created a bash script to sync the local
repo with the development server. .gitignore skips it though, as
it's developer dependent - other devs wouldn't need access to it.

This solves Unknown Unknown #2.

I've now created:
   64   407  2726 docs/Diary
   21   114   731 docs/Goals
   37    79   573 docs/Resources
  521  3665 22706 docs/Thoughts
   40   183  1315 docs/UnknownUnknowns
    7     8    57 server-code/index.html
    2     4    63 server-code/sync.sh
   49   125  1284 server-code/uu2.html
   84   226  1977 server-code/uu7.html
  825  4811 31432 total
825 lines and 31kb of text for this project and I've still not
laid down any code of my own other than a hello world holder
page. In fact from:
   7    8   57 index.html
  49  125 1284 uu2.html
  84  226 1977 uu7.html
 140  359 3318 total
We see that of the 140 lines of runnable code - as html or javascript,
almost all of it has been co-opted from examples at Stack Exchange
with perhaps the odd line or two done by me.

2017-04-21 17:57

Known Unknown #4: frame the maths needed to discover position and
range. The intent here is that we use the position, heading and speed
to work out where we'll be in some short period.

One thing to get right to is that logically I no longer need to do
the very beautiful circles thing above - I only need to solve for
the final circle, E. By using a function that returns the distance,
I'm able to solve for E, then use that distance function to work out
how far each in E is from the starting point, A. By then ordering
the responses by distance, I answer the question posed as consituting
project success: "I'm at X, Y walking in direction Z. What are my
options?"

I only need to solve E. The maths would seem simple: Given my position,
speed and heading, calculate where I'll be in (say) 90 seconds. Given
my speed, estimate the distance I could cover in an additonal (say)
45 seconds.

2017-04-21 19:59
To calculate likely position I would need to know the heading and
distance likely travelled from some origin.
The distance can be discovered from meters-per-second (aka mps, about
1.3mps according to Google, for the average man.)
mps can be calculated with the SE code from knowing where we are, and
where we were.
Unknown Unknown #8: More accurately accounting for location. Rather
than taking one reading at start and another at end, take readings all
along the way? Apply best fit analysis? This technique could be used
to later improve what we're doing.
Client opens web site and approves geo use.
JS obtains readings
With two or more readings, and using the most recent reading, calculate
the position we'll reach given existing heading and speed.
Use distance to establish where we will be
Use speed to calculate our radius from that point

A ----> B -----> C -----> D

A = Page is opened, first position obtained (x1, y1)
B = Most recent reading (x2, y2)
C = Guess of where we'll be in (90) seconds (x3, y3)
D = Guess how far we can travel in (30) seconds (in meters)

In particular note that C = guessFrom(A, B) is not to suggest guessFrom
should ONLY be using two values, rather that A, B forms an array of
two or more values. So: C = guessFrom(AB[A, a1, a2, a3, ..., an, B])

The remainder of this looks trivial, so I'm going close the first two
Known Unknown #4 elements off.

Is this maths better done client-side or server-side? Client-side, it must
be: with JavaScript heralded as a games platform, with devices using 3D
rendering, the cost of sending maths off-device must be enormous and only
getting worse.

Note: this question only rises because I have little idea about the maths
involved in the SE code and its relative processing expense. What I do
have insight about is the processing expense of network connections
(>Thousands of times slower) and floating point work (about 10x worse than
equivalent ints if I remember my 80386 clock cycles correctly.) As the
SE code chains 10-15 maths functions together, then on the face of it
even "150x slower" vs ">1000s" slower still makes more sense.

So: this maths is better done client-side. How much better is less
important.

2017-04-21 20:49
Known Unknown #5: can the TFL API support position and radius for
discovering what stops are nearby? Yes: taking lat, lon and radius.
https://api.tfl.gov.uk/swagger/ui/index.html?url=/swagger/docs/v1#!/StopPoint/StopPoint_GetByGeoPoint
A GET request to the given URL returns a JSON response which on the
example I've seen does return data about bus stops.

This only took a few mins to write, but I knew the above link from
a while back - indeed, it was one of the reasons I thought this
project might already be a goer. If I hadn't know about it, it might
have taken some time to discover it.

2017-04-21 20:59
Known Unknown #6: Reassess project in light of answers to
known unknowns and unknown unknowns.

I started yesterday with an idea: that I want a site to give me bus
stop options on my way towards a location.

I start off with a certain variety of resources both public and personal,
physical and intangible. It most certainly helps that I have equipment
and skills, and that I've already much of the overhead work when
creating my original eztfl.pectw.net site.

In the first phase I got down some description of what the idea is
about, how it would likely work, and what would constitute success.

In the second phase I started looking instead at what I didn't know:
the Known Unknowns - Things that I know I don't know, such as whether
my equipment is up to the job - and Unknown Unknowns - Things that
will impact the project but I haven't guessed ahead of time. Knowing
these are vital to reducing the risk associated with timing: the more
I know about what I'm doing, the less likely I'll be suprised.

In order to address these Unknowns, I formed lists of both as I went
along, and addressed each in turn until a short while ago all
outstanding points had been examined.

In proceding, some considerable overhead work has been started anyway:
Starting a github resource where what I've done so far can be found;
setting up DNS and Apache to support HTTPS connections; IRL work
walking around examining what devices were reporting. It'd be fair
to guess I've spent a bit more than a day of time investihating the
Unknowns, setting things up to answer them - things which are
identical to those I might have later done had I plunged in without
this preliminary work. So far I've spent no money (or at least, no
money I wouldn't have spent anyway) so the investment is minor.

In investigating the Unknown Unknowns I recognise that some aspects
of how I imagined the project need modifying. These are:

1. [x] Accuracy is an input into the site. I may choose that the
   site does different things at a lower accuracy than ideal. This
   can safely left to the Todo.

2. That older equipment doesn't offer heading and speed, however
   both those can be calculated by the project rather than obtained
   from the hardware via the OS.
   This will add a small amount of more time, but not much.

3. That the stack changes to:

client: HTML5/CSS <---(Definitely RESTful)-------> TFL: API
	JavaScript
	     ^   |
	     |  ++--------------------------------------
	     | / |(Maybe RESTful)
	     V | V
Server: PHP +--+                      Optional to implementation
	   / ^
----------+  |(Definitely RESTful)
	     V
TFL:    API

	Where note the client can themselves directly obtain such data
as they require from TFL. This would obviously be faster (as not
intermediated through my server) on the upside. On the downside, such
connections are more heavily shaped given it would be sans the APIKey.
There's the option of implementing via the server but I can't
immediately think of a reason why I'd want to.
	    This informs where the work is done. Answer: in the
browser.

4. That instead of seeking responses from increasing circles drawn
around where the user will likely be, it'll be sufficient to draw
from the largest of them and order by distance from the origin:

				    \
[A1, A2, A3, ..., An] -----> B --C--->
				    /

Where:
[A1 to An] are two or more sets of lat, lon coords in an array
    of readings of the position since the page was open
B is the lat, lon position those readings suggest the user will
  arrive at (docs suppose 90 seconds time, but that can be a choice
  left til later)
C is the radius in meters from B the user can get to given a certain
  amount (docs suppose 45 seconds) of time

  This informs the design of the program in terms of collecting
data and using it from history rather than naively using first and
whatever last lat, lon was and is.

Given these four, the definition of project success doesn't need
to be changed from "I'm at X, Y walking in direction Z. What are my
options?"

2017-04-21 22:16
Phase 3: implementation.

Now we know that the idea is doable with a much lowered risk that
something unknown will cause problems, it's time to consider what
to code.

Before we start note that:
   73   457  3065 Diary
   21   114   731 Goals
   37    79   573 Resources
  732  5191 31686 Thoughts
   12    84   534 Todo
   42   211  1500 UnknownUnknowns
  917  6136 38089 total
I have written 917 lines, 6000 words and 38kb on the project and
ZERO CODE code except to test
   7    8   57 index.html
   2    4   63 sync.sh
  49  125 1284 uu2.html
  84  226 1977 uu7.html
 142  363 3381 total
142 lines of code taken from Stack Exchange. A considerable amount
of knowledge has gone into configuring things, however.

What will the code Look Like? If we wanted a vehicle, we might fit
what we bought to the purpose: an 18 wheeler to haul vegetables,
a 1969 Dodge Charger to haul ass. Likewise with source: ours is not
going to be the earnest mouse of a batch script conveying an input
through to output. Nor is ours to be the matador of a RESTful server
dancing to avoid the garbage anyone from anywhere could be driving
at it. Nope: eztfl-html5 will be most like a computer game: it
starts when it does, it ends when it does, and between the two it
will thump away like a factory, updating, sending to screen, and
repeat.

Like a computer game, we'll have a Main Loop to which control
always eventually returns. Before the Main Loop is always such set
up as is needed. There'll be nothing after the Main Loop, as
there is no "after" that needs to be addressed: once the browser
window is closed, the browser itself will handle such clean ups
as are needed.

The Main Loop in this project is passed as a callback to
geolocation.watchPosition() - whenever the position updates, the
Main Loop is restarted. (This neatly avoids using GOTO start!)

This represents the core of the project. We now proceed to define
what the Main Loop should do each time its run.

The Main Loop should retrieve the current geolocation data and
store it. When two or more are available, they are used to make a
prediction about the future. When a prediction is available and
different to the last prediction, it's used to update the display.
The Main Loop then ends.

Notice we don't say anything here about the user interface, or the
user experience. That's because at this point, it doesn't actually
matter. We might just put straightfoward text. We might have
rambling zombie icons on the screen. We might demonstrate what we
have as a colour map. None of these choices need be made yet (or
even by us, in larger projects.) Our purpose for the moment is
simply to correctly process the input such that output has
something to work with.

We do want to know that things are working, however, so we'll add
a debug facilty in: we'll print out the inbound data, so as user
we can see things are progressing (although we could equally use
the developer tools, they're less convenient on portable devices
which is - after all - the target market.)

We have enough now to get going. We'll call this
server-code/a.html
1. Get an empty HTML5 present
2. Get JavaScript running at start up
3. Have setup handle for watchPosition() changes
4. Have mainLoop dump those changes into an array as they come
   in. Let's assume, for now, we'll follow the most recent 10.
5. Now branch if the prediction changes

I've been testing as I go. The faked prediction is different until
the tracked coords stack is full, and then doesn't change. Both
desktop and iOS reflect that only showing alerts while nulls
remain in the stack as it fills.

2017-04-22 02:37

2017-04-23 10:26
Continuing coding of the core processing.
As reminder, I'm looking only to bring in data from the OS and process
it sufficient that any arbitrary UX implementation could be considered.

6. Replace faked prediction with an actual prediction
   Notice that I've reworked the code from stack exchange above to fit
   this project.
   1. I've cleaned up the presentation to match my own style (spaces
   after commas, for instance)
   2. I've renamed functions to express more about what they do and
   prefixed "se_" to indicate the code's source
   3. I removed a function that duplicated another
   4. I added a function to translate our own use of the geolocation
   position as the fundamental unit to the lat/lon the stack exchnage
   code is expecting.
   This /could/ be done by rewriting the stack exchange code, but my
   preference is to minimise changes to code I didn't myself write and
   known I don't fully understand.
   5. Unknown unknown #9: are "heading" and "bearing" interchangeable?
   Reassess code in light of answer. If poss, write to use only one
   term: programmers should be consistent in names used for single
   purposes.
   6. Not comfortable with getSpeed() providing distance in additon to
   two positions as that possibly allows an error: what if position1
   and position2 change from when distance was originally calculated?
   This adds more weight to my feeling I should process all this once
   and store in an object or array, rather than process them
   consecutively.
   7. Also not comfortable with the naming just yet: getSpeed() here
   is assessing the speed manually, not from an accelerometer. I will
   need to distinguish between the two.
   8. Unknown unknown #10: is the position.timestamp in seconds? It
   should be. However https://www.w3schools.com/html/html5_geolocation.asp
   defines it as The "date/time of the response"
   9. Unknown unknown #11: is the position.timestamp available at all
   and if not, what would I need to store instead?

2017-04-23 11:25
Unknown unknown #9: are heading and bearing interchangable? No,
according to:
https://english.stackexchange.com/questions/54657/in-navigation-whats-the-difference-between-bearing-heading-direction-and-co
http://forums.groundspeak.com/GC/index.php?showtopic=137469
Bearing as the direction to the target, regardless what traveller is
doing. Heading as what the traveller is doing, regardless of where
the target is. The two can have the same value by coincidence.

I particularly like example at:
http://forums.groundspeak.com/GC/index.php?s=6cfc9af9a0d03709e9c028fe4594fec7&showtopic=137469&view=findpost&p=2324816
"Your GPS says the cache is on a bearing of 180 from you (south). You
might be facing or slowly walking east, or west or north, but the BEARING
to the cache is still south, despite where you are currently HEADING.
   Now, you start walking south. For the moment, both the BEARING and
your HEADING are the same.
	As you get closer, you continue walking on a due south HEADING but
you miss going directly to the cache because you angled off a wee bit. The
"GoTo" needle nows swings over until it is pointing east. Your heading did
not change, but you have a new bearing."

What does this mean for this project? The intent is that the browser
reports on options that lie ahead of the user. Thus, when the user changes
direction, the target changes too, so heading and bearing values are one
and the same.

Back to the code, the name heading or bearing applies, if at all, to what
the result is used for - the function is identical in either case. So what
word do we have to encompass both heading and bearing? hearing? beading?
After reading https://en.wikipedia.org/wiki/Bearing_(navigation) I think
I'll use 'angle' and save heading/bearing as names for later.

Unknown unknown #10: Is the position.timestamp in seconds?
Adapting
https://www.w3schools.com/html/tryit.asp?filename=tryhtml5_geolocation_watchposition
to suit certainly sees a unix timestamp come back. As another check the
APIs formal documentation at https://dev.w3.org/geo/api/spec-source.html
says the timestamp is of type DOMTimeStamp, which is formally noted
at https://www.w3.org/TR/WebIDL-1/#common-DOMTimeStamp as being a
millisecond timestamp (TS).
I almost missed that millisecond reference! I got a TS of 1492946407618
and almost missed it being longer than the unix timestamp 1492946317

So, no: position.timestamp is in milliseconds since epoch. Code would
need to divide by 1000 (or ignore last three chars) to reach the
seconds since epoch.

Correct existing code to account for milliseconds with massively
inefficient division by 1000 then shunt off improving to the Todo doc.
Why? Because the goal right now is to get the code behaviour effective,
not efficient.

Effective vs Efficient
Code is effective if it accomplishes the goals laid out for it.
Code is more efficient when the same behaviour is obtained with fewer
     processing cycles.
The project being Effective is desirable before Efficiency is
    looked at.
We want something to sell before we want something fast to sell.
Effective doesn't come at the expense of security, however. Nor does
it prevent us using efficient solutions if one is immediately to
hand. Effective before Efficient only demands we don't spend /extra/
time at this stage improving something that has yet to be finished!

Unknown unknown #11: handle if position.timestamp is not present.
There's no documentation on what value position.timestamp has when
the ts is not available. Probably null. Instead, I'm going to test
if the value is /reasonable/, and if not, replace it with a self-
generated value. The TS is reasonable if it is a integer > 0. If
not an integer, or <= 0, then it's not reasonable. Similarly, we
don't want a number larger than the ts for 9999-12-31 23:59:59,
253402300799000.

Unknown unknown #12. Can JS safely process 253402300799000?
1.7976931348623157e+308 is apparently the largest number that can
be held so I'm well within bounds.

Should we use this opportunity to handle .speed and .heading not
being present? Not yet: we already handle them in the code so
we're effective. "Handling" here would mean getting .speed and
.heading replaced in the position object. I'm not sure that's
wise: the first reading /couldn't/ have those values added. This
again feeds my thought there's an object lurking here. Add this
question to ToDo.

2017-04-23 13:23

We should now have the code give us a faked prediction based on
the values of distance, speed and angle from north (whichever
north the OS and hardware is observing, ie magnetic vs true.)
Time to Test!
Correct for typos etc
     correct ts to old_ts
     correct calculating which is earliest available position
     correct for thinking I was pushing positions to the stack,
when I'm actually pushing the lat, lon. Correct by changing the
stack behaviour to take positions instead. Notice that I comment
out the previous code and will only remove once I'm sure I won't
go back to the previous store lat, lon method.
   correct not changing all deg2rad stack exchange calls
Correct for logic etc
Findings:
	First alert is blank
	Second alert offers d=0 a=0 s=infinity (!)
	Don't get a third alert.
Correction: a prediction on one reading is actually handled so
	    remove the conditional protecting it
	On the desktop the first and second readings do not
diverge, so it's correct that distance = 0 and angle = 0.
However the speed should also be zero, not infinity! Detect for
zero distance and zero time taken and response with speed = 0
     Look through code for any other obvious divide by zero
issues. Not touching the se code here.
	Third prediction sees d = 0.00556009374253594,
a = 34.719661589330144 and s = 4972.757885083675 just from
walking through the house. Reasonable numbers? Code suggests
d is in Kilometers which suggest I moved 5.5m. I think I moved
a bunch further than that - about 30m - but of course IDK when
the calc was started. 34deg seems reasonable. 4972 is wrong
because the distance is calculated as km, and is reversed
anyway.
	After correcting, set up to try again outside walking
along a known path visible from maps.google.com. I expect
an a = 201.06, and a more reasonable s around 1.4m/s
   Test again: d = 0.028 (28 meters), a = 193 (very good!) and
s = 5.3.
  Intriguingly on the way back, got a s = 0.00000017 suggesting
the speed calc is still bad. Distance going negative too? 5.3m
a second is excessive. Nah, bad calc again. Fix, retest, and
all good.
    Now here's trouble: I mix microseconds and seconds, meters
and kilometers. Reassess with a view to using the first of each
internally.

2017-04-23 15:41

We're now sure that the prediction routine, currently providing
faked data, is receiving the data it should do in order to make a
proper prediction of location.

Our next move is to have the prediction alert to a) where we
currently are, b) where we're likely to be in 90s, c) the
distance in meters we're likely to get in the following 30s.

To start, we need something that looks like
x2,y2 = getLocationForm(position1, angle, speed, timetaken). As
that looks like it'll be very mathy again, I'll see if it's already
done like the earlier stack exchange cribs.
http://stackoverflow.com/questions/19352921/how-to-use-direction-angle-and-speed-to-calculate-next-times-latitude-and-longi
Looks like it has it but replacing speed and time with distance.
Fairynuff, we know that too. We'll test it to make sure we get
what we think we should.
Test 1: In NYC's Battery Park we have the
SeaGlass Carousel at 40.7015166,-74.016529 and a
WW2 memorial at 40.7016833,-74.0160355 a short distance away.
I make the distance 80, at a bearing about 85deg from true north.
In theory, calling the routine with 40.7016833, -74.0160355, 85, 80
should get us very close to the second lat, lon. We get the
answer 40.76052701040655,-73.0697842978443 which looks reasonable.
Plugging that new lat, lon into maps.google.com sees us turn up
some considerable distance away in Long Island.
     test: The angle was right but the scale is wrong. Km vs m
again? Yes. Still wrong, but after correcting my own errors
reading from maps.google.com, the destinations is correct. Let's try
another test.
	Moscow's "Red Square" is at 55.7539303, 37.6186063. The
Southernmost tip of South Africa is at -34.8329779,20.0002739.
The two are around 10,232km apart, and it looks like an angle
of 190deg from true. Now bearing in mind that bearings over
larger distances can diverge, let's see what the formal site
at sunearthtools.com says: 10213km and 189.56deg. So what does
the stack exchange code predict? A point roughly 536km due ESE.
This is probably good enough for the scales I'm intending to
use.
	Notice that I tested it by temporarily changing the code
page to just run the test and terminate.
     Now remove the test and rewrite to use meters internally.

Looking at a proper test wandering about the house looks reasonable.
Lets try again outside.
     Looking at the results, it's clear the prediction is very
likely showing me the last position, not an actual prediction.
Sure enough, I'm starting from the earliest available reading when
it should be the latest. Rewrite again.
   Test. Much better!

   That said, while the algorithm worked, the assumptions about the
constants involved may be wrong. It took walking about 45 seconds
to obtain 10 readings. 90s is basically predicting where I'll be if
I walk that far again. Instead we'll use 180s: Where I can get to
in 3mins. 30s as a radius is also too small. It looks like it
should be 180s minus the seconds I've walked thus far. In this
manner, a bus stop I've just arrived at while walking would also
be included.
   I already know that distance_in_meters is the distance I've
already travelled, and speed_in_meters_per_second is how fast I
did it. I can calculate that radius is:

speed_in_meters_per_second * 180 - ((latest.ts - earliest.ts) * speed_in_meters_per_second)

So if I walk at 1.5m/s, and it takes me 45s to get to the edge
of the radius, then the radius

1.5 * 180 - ((45 - 0) * 1.5)
270 - (45 * 1.5)
270 - 67.5
= 202.5

That can be nicely simplified too:
speed_in_meters_per_second * (180 - (latest.ts - earliest.ts))
1.5 * (180 - time so far)

Test this about the house: Radius of -2761. Not useful. Where
the maths wrong? I forgot the timestamps are milliseconds. Fix
and try again. 41 meter radius is reasonable from two readings
walking around the house. Looks good. Try walking up the road
and ten readings.
    Still doesn't look right.
Better. But sufficient?
Origin is right
newPos is right
Angle is right
Projected distance at 500m is about right for 3mins/180s but
 fails to include I already walked some of that
Speed is 2.8, but was down at 0.6?
radius at 379 is right.
       So correct for adding 180 second onto walking time already.
try again. ALOT better.

2017-04-23 19:47

Code hygiene. Looking through, there are a number of places where
constants are being calculated. Let's handle thuse.

There are unecessary comments. Remove those too.

Next up, security. While I'm not taking in user input just yet,
there's still the opportunity for me to be fooled by the OS
giving me unexpected data. For instance, it turns out that
the timestamp /could/ be NaN because that's a number type. I've
already handled it with:

if (!(old_ts >= FIRST_TIMESTAMP_EVAH && old_ts <= LAST_TIMESTAMP_EVAH))
instead of
if (old_ts < FIRST_TIMESTAMP_EVAH || old_ts > LAST_TIMESTAMP_EVAH)

because I can't guess if NaN shows up as less than or greater than.
According to the docs at
http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.1,
a Timestamp could be NaN. I'm going to guess that it could be null
as well. So basically any retrieval of a timestamp from the OS has
to be checked, and if in error, gets washed to a 1.
   I now go on to look at others: are coords.latitude and longitude
both always returned?
https://www.w3schools.com/html/html5_geolocation.asp says "yes". I
check them out too.
      In fact, all the readings from the OS pass through the early
function checkPositionValues(), because it's the position abject
that's the one new input each time the Main Loop starts. We'll
later add speed, accuracy and other checks, but not just yet as
we don't actually use them just yet.
   A point of style is that I fallen into the bad habit of putting
function open braces on the same line as the function when I prefer
to see them at the start of the next line
function() {   // nope
function()     // yep
{
I prefer them there because searching on \n{ is more likely to get
me a function start than searching on ) { which would get hits on
conditionals too. I'll make that change now.

	     Lastly in this section I'm going to look at the
names I've given to stuff, and improve them. For instance, the
tracked_coord_pairs array no longer does: it tracks the position
object provided by the OS.

2017-04-23 21:17

Unknown unknown #13: Should we handle sanity failures differently?

We now have:
   96   583  3940 Diary
   21   114   731 Goals
   37    79   573 Resources
 1131  8214 50131 Thoughts
   23   134   882 Todo
   61   298  2090 UnknownUnknowns
 1369  9422 58347 total
1369 lines of documentation, 58kb altogether.

And:
19	37	405	a.html
7	8	57	index.html
2	6	72	sync.sh
49	125	1284	uu2.html
84	226	1977	uu7.html
311	861	7949	js/scripts.js
472	1263	11744	total
472 lines of code, of which 142 was from stack exchange but has
now been edited down and adapted to suit.

Shortly: Start considering phase 4: UI
2017-04-23 21:42
2017-04-23 21:51
Time to reflect on a few things.
First, my source thus far is very much an example of procedural programming.
However there's very clearly a role of an Object-oriented approach
particularly surrounding the tracked_positions variable. For example, it
would be effective to arrange that whenever tracked_positions receives
a new reading from the OS, there's a cascade of effects including the
sanity check and speed right down to the prediction to be offered. Such an
approach would see the Main Loop, right now, become one line long.

So why didn't I choose to solve it with an object? This has to be because
I didn't see the problem as an object at the beginning, I saw it as a
question of coordinates as reflected by the original tracked_coords_pairs
name used for the same purpose. It could be I didn't see it that way
because I didn't fully appreciate the objectness of JavaScript, and that
might because I originally learned in the structure programming style. It
could well be that a different programmer would have gone straight to
objects. Neither approach is wrong, if both approaches result in
effective code.

Now that the approach has been laid down as a procedural program, could
a refactoring into the object-oriented style work? The answer has to be
"yes". Indeed it may also be preferable that it does, given we have made
no demands yet on it from a UI point of view, and the UI itself would be
more than happy to treat the current State of all these positions as an
object whose results can be exposed by methods.

That said, I mentioned earlier that efficient code in general should be
for further down the line: it's more important to get good code out now
than to get perfect code out but later.

Refactoring to use the object oriented style goes into the Todo.

Second, Now there's implementation I can forsee a number of problems on
the horizon.
1. The effect of the predict and radius implementation is that it'll
   change every 4 or 5 seconds so if the users' actions change (for
   instance by slowing down) then the predict and radius is likely
   to change too, potentially seeing bus stops come into and leave
   range.
   Not that there's anything wrong with that. But this does suggest a
   new layer between processing inputs and handling outputs where we
   slow down how fast changes are propagated. For instance, by
   maintaining observations on results that may previouslt have left
   range; or by supplying a "stop updating" button.
2. Second, We could possibly look again at the bubbles we invented then
   discarded earlier: if the radius encompasses the user's face but
   not the back of his head, then the response may not include the bus
   stop the user is currently standing at, Thus we should at least
   consider a second bubble with a radius matching the other side of
   the road. Thus:

		     _aQQQQQ6a
		   _jQP?   )?QQa
		  _QP'        ?Q6
		 _QP           )W6
		 QP             )Wf
		]Q               ]Q
		Qf                Qf
	       _Q                 ]6
	       ]P                 )W
	       ]f        C         Q
	       ]6aaa/              Q
	      _QQP?4QQ/            Q
	     _QQQ    4Q/          ]Q
	    _QP Q/    4Q/         jf
	    ]P  46     4f        _Q'
	    Qf  )      ]Q        jP
	    Q     B     Q       jQ'
	    Q       /   Q      jQ'
	    Qf     4Q6/]Q    aQQ'
	    ]6      )4QQ6aajQQ?
	    )W6       jQ????'
	     )W6     jQ'
	      )WW6ajQQ'
		)???'
	  A

  We see the user start moving at A, There's enough data to make a first
  prediction at B so then we conduct a search within C - where the user
  could be, but now also in B - what's immediately behind the user too.
  We can already solve this algorithm: B is the latest_position and it's
  radius should cross the road: 20m should do it.

Start considering phase 4: UI
   I've made no decisions about how things look to the user just yet. In
   fact all the browser will do is show the occasional alert() as little
   more than a budget debugger. That's on purpose: the presentation of
   data has nothing to do with the collection and processing of that
   data. It's directly equivalent to games programming: the players and
   npc's all have their moves dealt with independent of the presentation
   as a 3D shoot-em-up, 2D side-scroller, or isometric card game.

   Now that the input processing has created a model of the world I want
   the output layer to use, and acknowledging that as yet I don't know
   the data involved - just that I can get it from TFL - what to do?

   How about this: screen shows an overhead view with user at bottom in
   the pink-ball spot: in a minor rectangle around him he sees upcoming
   bus stops. In the major rectangle around that formed by the screen
   edge, he sees the major distant locations the local stops can serve.
   In between the two rectangles, a line connecting the stop to the
   destination, with the line marked by the bus number.

-------------------------------------------------
|		barnet			enfield	|
|		    \			lock	|
|		     \		       /	|
|		      43    ---121----/		|
|		       \   /			|
|			\ /			|
|			AB			|
|wood						|
|green\						|
|      \			Z--123		|
|	141			      \		|
|	   \----T		       tottenham|
|				       hale	|
|					/	|
|				       /	|
|				CD--N73		|
|				  \		|
|finsbury			   30		|
|pk   \--236---CM		     \---dalston|
|						|
|						|
|						|
|						|
|						|
|                  you are here			|
|						|
|						|
|						|
|						|
|						|
|						|
-------------------------------------------------

   In this manner I can see what my options are in pretty short
   order!
   The location of the bus stop letters around the square gives
   me a visual cue of how far I need to walk to get there. The
   bus numbers give me something I can recognise even if the dest
   is unknown to me. And the destination of course gives me a cue
   as to more distant exchanges.

   Observations:
   1. One could swipe the map around beyond the above bringing
   even further stops into view.
   2. Ditto but with a +/- to zoom out further
   3. It would be interesting if the stops could be linked
   together if they're server by the same bus rather than have
   sucessive stops separately connect to the destination
   4. Clicking on the stop letter brings up the usual countdown
   with minutes per next route.
   5. Clicking on the route number brings up its time to arrive
   at related stops.
   6. Unlike the work thus far, modelling the stops and routes
   this way can be done entirely on a desktop as we can fake a
   prediction, so I won't have to do much walking to test

It looks like processing would happen this way:
1. With prediction and radius (potentially multiple bubbles) get
   a list of all bus stops in area and file them
2a. With each bus stop get the major destinations
3. Get the list of buses and link to that major dest
   (this is taking dest from stop)
OR
2. With each bus get the routes and from the routes get the dest
3.
   (this is taking dest from bus)
4. Solve the problem of multiple buses from one stop to one dest
   overlapping each other by having an intermediate rectangle
   with occupiable points along it. If point in use, get next one
   above or below
5. pass them on for drawing in the next phase

   In this phase, we're going to see adding in calls from the
   device direct to the TFL API, that is, without assistance
   from the original server. As a direct call, obviously I won't
   be adding my own API details in. That means individual
   instances may be traffic shaped from TFL. That /should/ be
   okay seeing as there's a limited amount of traffic expected
   from each instance, but it does create a Known Unknown: we
   can't tell at what point TFLs system might block the access,
   if they can determine it at all. A solution should therefore
   include detecting that block on the device.

   This divides the UI work in two. I previously took the
   location data and formed a catchment area. This UI work sees
   that catchment area used to form a model of what's in it
   suitable for the likely UI use. The next stage will be to
   take that model and represent it on screen.

   Before coding, let's see what happens manually. Assume that
   I'm at Parson's Green tube station at 51.475189, -0.200757,
   I have a predicted location of 51.473840, -0.200628, and a
   radius of 322m. That creates an API request of
   wget "https://api.tfl.gov.uk/StopPoint?stopTypes=NaptanPublicBusCoachTram&radius=322&lat=51.473840&lon=-0.200628"

   The JSON response says there are eight stoppoints nearby.
   I don't recognise some of them, but two related stops are
   are Stop X (Naptan 490015575X, @51.472873, -0.199248) and
   Stop GM (490005156W, @51.473532, -0.197034). Both of those
   check out accoding the maps.google.com. The first has sms
   code 53001 with 3 arrivals expected in next 20, the second
   has sms code 54445 with 6 expected imminently.
   I notice the JSON also provides a distance but no bearing.
   We also get in additionalProperties Towards = Chelsea
   which matches the bus stop sign from google streetview.

Option 1: per bus stop info
   So with just that one JSON, we can tell the big red and
   white bus stop letter "X", we know the major local
   destination "Chelsea", we know the bus routes (lines) that
   serve the stop "22" and "N22" and so can connect that
   route to that destination, with just the one call. We
   cannot determine the next or previous stop (which is right
   because next and previous refer to the bus route, not the
   bus stop.)

Option 2: per bus route info
   If we do a further lookup using that naptan code to
   wget "https://api.tfl.gov.uk/StopPoint/490015575X/arrivals"
   then we get further get the ultimate destination. That's
   probably less helpful. But we do get the countdown.

   Can't link stoppoints one to the next it would seem: can
   get a list of stops for the route but they don't appear
   to be in order. Further, they don't exclude previous
   stoppoints.

   This all suggests that we can do exactly what we thought
   we could above with the API, without futher reassessment
   of difficulties. Having the stops nearby link to each
   other is a Todo for later.

2017-04-24 13:29
   Now we we've considered the direction for the UI to go, and
   what that means in terms of API calls, and then in terms of
   data that we receive, it's time to look at how the code
   can give effect to what we want.

   The first thing I want to bring back is that I earlier
   considered what should be done about the drift, and that a
   solution is an intermediate stage between receiving data
   and drawing it to screen. Here's the first consequence of
   that: when data is received about the bus stop it should be
   used to fill an array of things to be considered for
   drawing, and that stack persists that bus stop's presence
   *even if* drift later sees it vanish.

   So make the request, fill the stack; make a second request
   and add to the stack leaving existing entries alone. This
   is trivial to implement so lets move it on.

   What's not trivial to implement is the code to request
   data, so I'm going to copy it off an old project. And we'll
   set it up to test that it actually works before we start
   plumbing it in.

   .. And of course it doesn't work as the CORS preflight
   failed. The CORS preflight check is different because the
   browser uses the HTTP OPTIONS to ask of the API "what may
   I know about this link coming ...?" to which it gets a
   405 response - Method not allowed. If OPTIONS is not
   allowed, then the whole connection must fail as a security
   measure.

CORS - cross-origin resource sharing
   CORS is a security technology designed to handle website A
   causing actions on website B via the client C. Here, the
   https://eztfl-html5.mpsvr.com site is website A, and the
   https://api.tfl.co.uk site is website B. The javascript in
   the browser is client C.
   It would be entirely wrong for any website A to use client
   C to make an amazon purchase, for instance. CORS is used
   to ask nicely "may website A to action D?" With TFL
   returning 405 to an OPTIONS request, the browser assumes
   the answer is no and aborts the connection.

   There could be two answers to this. Either:
   1. TFL does offer CORS access and I don't know
   2. I could make the CORS request back to my own server
      which approves and passes through the request in a
      proper way.

   I can't see anything online to suggest they're allowing it
   but I do see
   https://www.robinosborne.co.uk/2017/01/09/london-buses-use-tls1-2/
   where Robin specifically mentions the cross origin as
   being an issue.
   I do see a reference to a cross-origin prob being fixed at
   https://blog.tfl.gov.uk/2015/12/07/unified-api-part-5-aot-arrivals-of-things/
   but it cames from a 504-Gateway Timeout issue, suggesting
   this is a problem with the No. 2 solution. It doesn't
   seem likely that TFL would allow CORS to work. While
   there doesn't seem any risk that HTTP writes could cause
   a problem, there's also the benefit from more effectively
   managing bandwidth.

   The No.2 solution is to send the request back to my server
   and have that forward the request on to TFL. As the JS has
   come from the same server being interogated, CORS should
   not enter into it. This will slow traffic down: (because
   instead of C --> B --> C, we'll need
   C --> B --> A --> B --> C) and also a BIG security concern.

   To start with, if I simply forward traffic, then all that
   traffic looks to TFL as if it comes from one place and
   would be shaped very hard, very quickly. In contrast, if
   I add my own API key etc to the rewrite, anybody using
   that facility could do anything using my credentials. The
   pragmatic solution would seem to be to confine what can be
   done through the facility to what I need to provide for
   that app (which is the bus stop lookup, then the countdown
   lookup) denying all others, and to append to both whatever
   my credentials are.

   Robin's choice above was to code some sort of simple reverse
   proxy. He seems to be using a Windows machine which I do not
   so I'll skip writing PHP as a direct equivalent and instead
   set up Apache to reverse proxy for me.

   First up, Apache could reverse proxy with a simple
   RewriteRule. The documentation says that's poor for performance
   as it looks like it creates a one-off instance that serves
   and ends. https://httpd.apache.org/docs/2.4/rewrite/flags.html#flag_p
   "Avoid using this flag and prefer those directives" it says
   referring to ProxyPass. I don't see anything in ProxyPass to
   suggest I could later add in the API credentials. Nor in
   ProxyPassMatch. It does look like any query string is ignored
   for the purpose of the rewrite, however. Perhaps that query
   string can be adjusted beforehand, and is then passed though
   after the domain rewrite.

Uknown unknown #14: can apache do the reverse proxying needed?
   1. Show that Apache can reverse proxy https
   2. Show that the proxied URL can be modified

   1. Show that Apache can reverse proxy https
   Reverse proxying can be done by configuring Apache with

LoadModule proxy_module /usr/local/apache2/modules/mod_proxy.so
LoadModule proxy_http_module /usr/local/apache2/modules/mod_proxy_http.so

   and in the virtualhost with

SSLProxyEngine on
<Location "/mirror/foo/">
	  # StopPoint?stopTypes=NaptanPublicBusCoachTram&radius=322&lat=51.473840&lon=-0.200628
	  ProxyPass "https://api.tfl.gov.uk/"
</Location>

   Notice that "/mirror/foo/" doesn't need to actually exist in
   the filesystem.

   2. Show that the proxied URL can be modified
   I want to closely confine the URL passed through to an
   acceptable range (acceptable to me.) I can confine to
   StopPoint using the Location "/mirror/foo/StopPoint" and
   adding that to ProxyPass: "...gov.uk/StopPoint". Can I do
   the rest using ProxyPassMatch?

   That was a several hours ago. Try as I might, I can't see
   to get Apache to honour RewriteRule AND ProxyPassMatch.
   Reluctantly then, I fall back to the original poor
   performance RewriteRule. Instead of the entries above, I
   turn them off and use:

LoadModule proxy_module /usr/local/apache2/modules/mod_proxy.so
LoadModule proxy_http_module /usr/local/apache2/modules/mod_proxy_http.so
...
 And in the virtualhost:
SSLProxyEngine on
RewriteEngine ON
RewriteRule ^/mirror/foo/StopPoint "https://api.tfl.gov.uk/StopPoint?app_key=ABC&app_id=123" [QSA,P]
ProxyPassReverse "/" "https://eztfl-html5.mpsvr.com/"   RewriteEngine ON

   It doesn't help that I had a bunch of alchohol tonight I
   should think. I could ask online, I suppose. Or I could
   do what I am and saying You Know What? Using ProxyPass
   was a performance improvement, and thus is something that
   can go on the Todo list - it isn't mission critical.

   With our own server proxying back properly (as requested
   by:
wget "https://eztfl-html5.mpsvr.com/mirror/foo/StopPoint?stopTypes=NaptanPublicBusCoachTram&radius=322&lat=51.473840&lon=-0.200628"
   We can (after changing the credents in the config) get
   the JS using it.

2017-04-25 04:12
   Next issue up: while we ask for json, and we get json back,
   the javascript chokes on printing out for us because it's
   converted internally to an Object. Nothing wrong with that,
   as long as we know. Fixed.

   We can be comfortable now that our project, however poorly,
   can interact with the tfl API. We can use this opportunity
   to tidy up the new code.

   What I've done is remove the variable from the routine that
   actually makes the call, because I know we'll need to make
   different calls on the API and I'd like to reuse code as
   far as possible.
   "handler_uber" and "handler_task_1" are called on when the
   server has responded. This unusual splitting them off is
   a hold-over from the previous project where the one
   handler is needed to respond to lots of different tasks
   with no easy way to say which is which. By splitting the
   callback function from the function that does the work,
   the latter can look at the name of handler_task_1 and so
   do work according to that. Versus seeing handler_task_2
   and doing something else.

2017-04-25 04:42
   Now we can have the bus stops in the predicted area, we want
   to persist them in the program. We can then return to connect
   the code that persists with the code that gets.

   Our objective with persisting the bus stop data is that we
   put it somewhere we can re-use *even if* the bus stop itself
   drifts out of range. We dont want to keep it forever though.
   So we obtain the data, extract the bus stop, and check
   through the existing stops for it. If we see an expired stop
   (ie, "Not seen in ten minutes") then we delete it. If we do
   see it, then we refresh the timestamp we last saw it. If we
   don't see it, we add it. As we want to persist this data
   even if the browser closes for a short while, we'll keep
   track of them in localstorage.

   I start with rewriting the prediction code to construct the
   url and then ... everything goes pear-shaped. Desktop browser
   reports "Network location provider at
   'https://www.googleapis.com/' : Returned error code 403.".
   ios safari reports Error : "Operation could not be completed
   (KCLErrorDomain error 0)". Similar problems with Android.
   Geolocation seems to be bad, even to a machine I remoted
   into.

   By midday it was back to normal. Complete and walk about to
   see what happens: I expect it to show me a changing list of
   stoppoints.

2017-04-25 14:30
   Gone for walking while seeing what's going on. Possibly 1/3rd
   the requests came back 400-Bad Request. I haven't put in the
   code to details what caused that, but as 2/3rds came back
   fine, and over time those entries changed, I feel comfortable
   leaving the 400-Bad Requests to one side.

   Looking at the Apache log it's clear the radius has worked
   well - it spends a lot of time at 200m (code forces 200m as
   the minumum.) Likewise the lat/lon seems to move about as
   one might expect - I'll take a random three and see if they
   match my route. Yup! All good. I notice that the radiuses
   often have decimals. Maybe that was the 404-BR problem? Try
   it out at the TFL site. Sure enough, repeating the same
   request with and without radius decimals causes a 400-BR and
   a 200-OK, so correct to remove decimals. Now let's look at
   the screen caps as the bus stops were changed. Yep, they do
   look like the stops I'd expect.
   A curiosity: doing a search on the id used brings back
   multiple matches. Is the id not the naptan? Is the naptan
   not unique? Am I searching with the wrong call? I would
   expect a search on one naptan to return one result. Could it
   be a convenience that local stops are also shown? Searching
   on stationNaptan has the same effect as searching id or
   naptanId. I can only imagine it's an error at there end, or
   a convenience. However, searching on the naptan code is not
   part of the work flow I'm expecting, so we can leave it to
   one side. Good - looks like the project is persisting the
   data we want in the way we want it.

2017-04-25 15:39
Observation. A reasonable improvement would be to interrogate
   the API for all stops within a mile or so, then scan THAT
   for the stops within range. That gives us just the one call
   to be made to the API until we get closer to the edge. Add
   this to Todo

Upcoming:
   1. Next is to write code that would repeat the countdown
   check.
   2. Beyond that start work on UI elements

Repeating the countdown check
   This project sprouts in part because of my work on the previous
   site at http://eztfl.pectw.net, getting countdown info out as
   fast as poss. I want the bus countdown available in this
   project too. These requests go to
   "https://api.tfl.gov.uk/StopPoint/490015575X/arrivals"
   which is slightly different for the reverse proxy: the existing
   rule gets StopPoint?, and this one gets StopPoint/ - can the
   two be made to marry up? Or does it need a new rule, perhaps
   at /mirror/bar?
   No, doesn't look like it can be a two in one. Set up its own
   at /mirror/bar, and check it doesn't interfere with the
   existing rule. Done! This adds to the config above:
RewriteRule ^/mirror/bar/StopPoint/(.+)/arrivals "https://api.tfl.gov.uk/StopPoint/$1/arrivals?app_key=ABC&app_id=123" [QSA,P]
   Reverse proxy set up.

   Now we want to make use of the reverse proxy, so set up another
   test function, similar to before: on page load send the request
   to
https://eztfl-html5.mpsvr.com/mirror/bar/StopPoint/490015575X/arrivals
   Works first time. How often does that happen?

   What thought needs to go into the countdown - are we going to
   persist that too? The intention is that when the user sees a
   stop he's interested in, he taps on it and that causes the
   JavaScript to call for that countdown set, presumably to get
   it echoed out. Once out there, it would seem to have no more
   use to the project - just to the user - and would either be
   abandoned in favour of a different countdown, or perhaps in
   favour of an update to this, its own countdown.

   There's nothing in this description that lends itself to
   persistence in any sense. To the extent that anything does
   persist, it will be the html elements comprising the user
   interface; the data itself is ephemeral.

   That said, we'll take and keep the data only long enough to
   get it off for rendering.

Phase 5: drawing to the display
Working on the UI elements
   There are two approaches in mind. The first I outlined above
   when I thought of a rings approach, with bus stops in the
   centre, buses next out, stop destinations in a ring beyond
   that.

   The second, and more obvious that somehow escaped me thinking
   of it first, is to just whack out the data as it comes in
   to whatever html elements are appropriate.

   We should observe that there is little difference between the
   above two approaches: they both get <divs> on the page with
   the second approach discarding any sense of positioning.

   In which case it's a reasonable approach to a) get the <div>s
   out there first; then position them as best fits.

   This creates a new data layer to play with. On one side we
   have the various bits of data coming down from TFL in JSON
   files. We then add some things: the timestamp to the bus
   stops list is one. We'll also want to add positioning data
   describing something about what it'll be doing, such as a
   type: this is a bus stop. That is a near destination. The
   other is a bus line. We will want them all to have IDs as
   well, so updating can quickly handle old <div>s that are
   hanging around.

   This seems to be describing an array of elements that will
   end up being <divs>. They have an id so we can update them
   as time goes by; we have a timestamp so we can expire them;
   they get an X, Y and Z that can be used to indicate where
   they are. Could also give them speed, acceleration and so
   forth later. In fact there's so much that could be done
   there it'd be smarter to give them a "location" object that
   can be extended as we go. Come to think of it, each div
   might have children that follow in tow, for style reasons.
   There might be other elements: for instance, and image
   could be attached to it.

   I suppose one could use the existing DOM to store some or
   all of this stuff, but my mind is to keep it separate. If
   nothing else it stops weird stuff happening on screen if
   minor changes cause a very obvious rebuild of everything.
   Using buffering of changes to screen would also allow
   potentially interesting future options, such as moving
   elements slowly closer to where they should be rather
   than all at once.

   Let's run it as a test. We should be able to create a
   structure that describes the div, but which isn't the
   div; that structure should be used to create the div when
   the time comes; that structure can then be updated with
   elements appearing and disappearing; and running the
   render routine updates the browser page to reflect that
   fact.

   Would it better to create a new div that replaces the old?
   or update the old? These questions and more shortly to be
   answered or ignored.

   And of course, geolocations is off again. Never mind, this
   can be done without it.

   Can now create, delete, update without problems. Put them
   into their own routines. Done.

   Now have good code that adds elements as it goes along;
   can delete them, or replace them as wished.

2017-04-26 13:06
   Next two baby steps: 1, get the incoming data into a
   structure and pass it on. 2, traverse that structure
   dumping to the DOM.
   We receive new bus stop data in receiveNewBusStop() where
   they end up in localstorage. And countdown data in
   receiveNewCountdown(). We want to pass it elsewhere in
   the program, just like the bus stops. We could use a
   global to do this, but I'm going to send it to
   sessionStorage because this allows the data to be made
   available to future threads, whereas in a global it would
   be lost at termination of this thread. This is less
   efficient as we take on an overhead of dumping stuff to
   sessionStorage, but increases out options in future.

   Let's now cause the completion of the download and saving
   to localstorage to start the bus stop rendering sequence.

   Looks good. I notice occasional duplication of bus stops
   presumably because of the naptan request seeming to bring
   back "oh, and these local stops too..."

   Time to implement the displayport requirement per the
   project goals. At the same time I'll get rid of the
   favicon lookup.

   The intention has been that clicking on the bus stop will
   cause the countdown for that bus stop to be displayed. This
   would be done through JavaScript too, so add in something
   to prove it can be done. This happens with the html element
   getting onClick(), I think. Done!

   Now we want the countdown data to be displayed in a similar
   manner to the bus stop data.

   Excellent: we now have the bus stops listed on page, and
   when touched, it'll bring up the countdown for it.

2017-04-26 16:33
   We now have an operational website. It's been six days or
   so, although it was part time plus keeping the documentary
   up to date took away a bunch of that time. As of now the
   line count is:
HTML/bash script:
     24      48     593 a.html
      7       8      57 index.html
      2       6      72 sync.sh
     49     125    1284 uu2.html
     84     226    1977 uu7.html
    166     413    3983 total
166 lines
JavaScript:
   53   127  1226 js/connect.js
  565  1560 14652 js/scripts.js
  618  1687 15878 total
618 lines
Documentation:
  133   847  5571 Diary
   21   114   731 Goals
   42    92   695 Resources
 1808 13073 79817 Thoughts
   39   203  1286 Todo
   64   308  2150 UnknownUnknowns
 2107 14637 90250 total
2107 lines.
So: 2881 lines altogether, of which 784 are lines of code.

Comment on Anonymous functions:
   These seem to be very much abused. Consider the following code:

busstop.lines.forEach(function(routeno, index, array) {
  text += routeno.name + ' ';
});

   It could equally be written as:

for (routeno in busstop.lines) {
  text += busstop.lines[routeno].name + ' ';
}

   The first is an example of an anonymous function and those seem
   to be *everywhere*. Have a look at
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach?v=control
   Where we learn:

The forEach() method executes a provided function once for each array element.
Syntax
arr.forEach(function callback(currentValue, index, array) {
    //your iterator
}[, thisArg]);

   I came to learn about forEach(), yet I'm seeing the anonymous
   function pushed in my face. The code would surely be better as:

arr.forEach(<function name>) {
    //your iterator
}

   Anonymous functions no doubt have their place in the world but
   I can't think of anything else so heavily abused - it makes me
   wonder if their use is more like a marker for a programmer
   trying to obfuscate the logic and at the cost of the user who
   has to process the function overhead each time around. So
   refactor my code to remove the anonymous functions I've picked
   up.

   Come to think of it, GOTO was more heavily abused. Now I'm wise
   enough to know never to use it, I'm old enough to know when
   I should use it.

2017-04-26 20:26
Comment on just-in-time knowledge:
   This is a great term I heard on the radio earlier on. While it
   already seems to have a meaning online it speaks to something
   I've practiced for many years: I might not know the answer to
   a particular question, but I know where to find the answer and,
   more importantly, what the answer means.

   Example: I've just detailed what I think about anonymous
   functions, the removed them from the project. You might then
   ask Why Did I Have Anonymous Functions In The Project? A
   reasonable question. If you review the code, you'll see I had
   objects retrieved as JSON from tfl, and then wanted to
   iterate through them. Well, I know how to do a FOR loop, the
   most basic loop. I also know from PHP that FOREACH loops are
   used there to iterate over arrays and objects. When I looked
   up the JavaScript version of it, the example gave the anonymous
   function (see just above for the link to that.) Well, I know
   how to work with an anonymous function, and my purpose when
   coding is, as mentioned before, to be effective with what's in
   front of me - not to be efficient, not to improve it, but to
   concentrate on getting product ready.

   This demonstrates the Just-in-Time Knowledge I think I use -
   I remember the programming construct I need is the loop; I
   recall from previous experience that there are different loops
   for different purposes and that I'm wanting to iterate over an
   object; I know how to use a search engine to obtain the syntax
   for what I want; and I know how to adapt the syntax into what
   I need to use for the purpose at hand. Thus, to me the loop is
   in effect a black box to be plumbed in. As a black box I'm not
   needed to be that interested in its internals: if it works,
   then it's sufficient for now.

   Of course, it may be that - as now - the result is an
   inefficient solution such as using anonymous function as the
   loop internal when regular code would not suffer the same
   overhead cost. That's where more traditional knowledge and
   experience comes in useful: knowing that the JiT solution
   can be improved, and how, and that it can be done in a very
   short period has its own value. A professional JavaScript
   programmer could probably have written the same code, faster
   and first time out. Although I'm slower if only because I
   wrote it once then refactored without the anonymous
   function, it does make me independent of the language I need
   to program in.

2017-04-26 22:09
Phase 5 review:
   Let's look again at what we have now that we've got a working
   site. A review: once the data has been retrieved from tfl and
   processed it finds itself in sessionStorage or localStorage
   depending. There were two options for then getting that data
   to the user. In order of complexity: 1, dump everything to
   screen and 2, make a ring-centric, logarithmic eye-candy site.

   We're into the dump everything step. As in, we dump the bus
   stop sign and routes visiting it. At the user's request we
   then dump the route number and minutes until it arrives for
   as many buses as tfl report to us.

   And when i say "dump", that's exactly what I mean - the data
   is sent to the screen without checking for duplicates I'm
   sure are happening, in whatever order they're presented to
   us. I'm thinking certain old data stays presented (countdown
   data not being expired when new countdown data arrives
   maybe: if fewer new countdown entries arrive than last time,
   the old entries beyond the number of new entries are not
   deleted.) While I might be dumping, it's not "everything"
   with things missing like the near destination, the bearing
   to the bus stop and others.

   The goal as originally stated was "I'm at X, Y walking in
   direction Z. What are my bus stop options?" and it's
   arguable that the site as it stands meets that goal: some
   work has to be done by the user but still: I've tested that
   I can walk down the street with the web page open, I can see
   the bus stop sign from sme yards distance, I can open the
   countdown for it on the browser, and I can see the entries
   for that even before I get the bus stop.

   This is an improvement for the human as he doesn't need to
   get to the bus stop before calling for the countdown. This
   comes at the cost of obtaining a later phone that can
   support HTML5 than the earlier phone which needs the SMS
   number from the stop, but uses HTML4.01 last updated in
   2001.

   However I wouldn't necessarily take the website as it stands
   back to a client and say - here: this accomplishes your
   goals. At the same time, if it DOES meet their goal, then
   clearly there's more to consider than just that goal, or our
   understanding of that goal doesn't sync.

   The best way to understand how the project has
   simultaneously met the project goals and "isn't ready" is
   to view there as being two projects that weren't visible at
   the beginning. We could have two Projects:
   1: Please program a model that answers the question: "I'm at
      X, Y walking in direction Z. What are my bus stop
      options?"
   2: Interacting with the model from the first project, please
      work on its UX.

   Now it's obvious that the second project has an awful line
   with "please work on the UX" - anybody can claim almost
   anything to establish work was done, or not done. A
   reasonable person can look at the first project and say,
   Yes, this answers that 'options' question. But a reasonable
   person couldn't do the same with the second question. What
   work? Yet as soon as that work is laid on paper, the project
   invites trouble: what if the definition was bad? It's not in
   the programmer's interest to see the project tank because
   there's no room to adjust.

   Rather, the approach to take is to quantify progress in
   solid terms such as hours contributed, or money spent. This
   should have a UX lead with the power to sign off the work
   as being done. The second project would also have regular
   progress meets specifically for that UX lead to raise issues
   or change direction. If the UX is bad at the end, at that
   lead had raised no issues, then it's likely the UX lead has
   a bad sense of what's good. Alternatively if the UX lead had
   been raising consistent issues about what was needed and the
   project at the end looks bad, it's likely the programmers
   aren't upto meeting the vision of what the UX should be.
   If the UX vision was moon-on-a-stick territory, the
   programmers ought to have bought that up before starting
   work ("I want the site to work like Amazon's. Your time
   budget is six hours, or $400 whichever comes first.") In
   this manner, both buyer and doer share the risk inherent to
   all projects, and both are motivated and disciplined into
   reaching a vision that's achievable achievable, realistic
   and time bound, even if its not simple and measurable.

   In the event the UX can be done under budget and in
   schedule, so much the better. If one or both is going to
   go over, then that should be clear well before things go
   south.

   It's worth noting that as these are two seperate IT language
   projects then it would have been possible to have them run
   in parallel. To do so would require agreement on the
   interface between the two in terms of what data in what
   form is available in what place. With the project as it
   stands, that would mean defining the JSON currently in
   sessionStorage and localStorage.

2017-04-27 09:52
How many resources to put into second project?
What method should use for doing this myself?

2017-04-28 07:38
Having spent some considerable time using the project around
northern London today...

Observations:
 I /really/ liked that I could be a good 100ft away from the
bus stop and see the white letter/red disc combo on top of
the stop pole, then pull up the same on the browser. I'm very
much looking forward to being even further away and seeing on
screen the most likely candidate for that bus stop.

Suggestions:
  These can /only/ be suggestions because they did not form
part of the original project goal. As a suggestion they go into
the feature set that'll be added given the resources/budget but
if missing, none should be considered a show stopper. If one
actually is a show stopper, something's wrong!
1. UX - indicator of travel direction for bus stop?
2. UX, Middle, Backend - show tubes nearby
3. Doc - That this a read-only project
4. UX - connect with old site at eztfl.pectw.net
5. UX - use 𝈚  from http://shapecatcher.com/unicode/info/119322
6. UX - Use css to make larger, smaller (not zoom!)
7. UX - use css and/or inline data to form images
8. UX, middle - to stop or slow refresh lookups
Note the above, if mandated counts as Feature Creep which is to
be avoided. I thought of the above list while wandering around. If
I got back to the office and demanded they be accomodated then
1. I've distracted the programmer(s) who have not yet completed the
phase 5 project
2. I've diluted concentration on the second project to implement or
think about non-core functionality
3. I've thus managed to bloat the project, the budget, the hours
required to complete the minimally pretty side of things and very
particularly throw far off int the future that far off  day when
the project can finally be signed off.
So - suggestions are good, but they need a very, very short leash.

How many resources to put into the UX project?
  We obviously can't answer "how long would the second project
take?" as the question is analagous to "how long is a piece of
string?" - it could be as long or as short as desired. Our project
could be more or less featureful as resources put in permit.

That said, we shouldn't leave it open-ended either in hours or
money even with the regular reviews. But neither should we
fetishise finishing exactly as scheduled or budgeted. Instead,
let's define a series of functionality milestones to be hit in a
specified order towards which budget and hours can be assigned.
We already start from the position where the project is in some
sense acceptable, as we've met the original goal. What's left
are incremental improvements.

At some point, some nominated person is going to balance the
completed features, the budget and the timing and say "Yes,
that's enough". Until then, the UX project spends budget and
assigns hours completing milestones. In the best of all worlds,
that will leave the project, at each milestone, in increasingly
acceptable states. It's then for others to decide to go early,
or add resources after running out.

So to answer "how long would the second project take?", the
answer is "The project meets technical goals right now. It will
get prettier according to this functionality path and will
always be ready to go public at it's previously hit milestone.
You decide how long it takes."

By implication, remaining features would then be deferred until
later.

What method should use for doing this myself for this project?
  To start with I recognise that the first part of the project
is not yet finished - for instance near destinations don't
show up in a <p> or <div>. Enumerating and implementing these
should be trivial given knowledge of the work done. In a
bigger project, the UX lead would already have made this list
and the programmer would now be ticking off that they're in
the DOM.

First Project:
[ ] Establish list of additional elements to be made available
 - near destination (visual)
 - distance (property)
 - bearing (property)
[ ] Arrange the data is cleaned of duplicates before use
[ ] Arrange the countdown data is ordered before use
 - first ordered by minutes to arrival
 - second ordered by bus route's first arrival

  Again, in a bigger project the UX lead would need to
establish what data should be available with degrees of Nice-
To-Have (n2h). The busstop data as a group might be a level 1
n2h because without it the project makes no sense. The final
destination of the bus might be a level 3 n2h. Having nearby
tube countdown data might be a level 5. The UX lead might
additionally underline all level 2 and 1 items as mandatory
such that not having them would see the project pulled.

Second project:
  For the eztfl-html5 project, and with me as the UX lead, I
can write up the n2h list like this:
Level 1:
[ ] "you are here" in the pink ball position
[ ] Ring system:
  [ ] Positioning system based on three rings in the centre,
    middle and edge of the screen such that data can be
    located on each ring if given either a bearing, or if
    located on the middle ring and given an inner and outer
    ring pair it should connect
  [ ] also that given a distance, can arrange for distance from
   the centre of the screen to be logarithmic so to fit more
   data on screen
  [ ] Also that the rings may be of arbitrary size, such that
    one can be given more screen real estate at the expense
    of the others
  [ ] also that elements occupying the same ring should not
    overlap but expand around the ring. Two or more elements
    occupying the same position on the ring should centre
    around that position on the ring;
  [ ] that the rings be associated with the user's heading such
    that when the user changes heading, the elements on the
    rings shift around to match
  [ ] That elements on the centre ring have lines connecting them
    from their inner to outer ring
[ ] that bearing and distance be used to associate bus stops with
  positions on the inner ring
[ ] that those bus stops reflect the red/white code seen on top
  of bus stops
[ ] that the near destination for each bus stop code occupy the
  outer ring, initially following the bearing of it's bus stop
  partner in the inner ring
[ ] That touching a bus stop code in the inner ring will bring
  up/replace an ordered countdown below the pink ball spot
Level 3:
1. UX - indicator of travel direction for bus stop?
2. UX, Middle, Backend - show tubes nearby
4. UX - connect with old site at eztfl.pectw.net
5. UX - use 𝈚  from http://shapecatcher.com/unicode/info/119322
6. UX - Use css to make larger, smaller (not zoom!)
7. UX - use css and/or inline data to form images
8. UX, middle - to stop or slow refresh lookups

Notes:
1. I have an expectation that HTML/CSS is used as far as possible
   to effect both content and positioning so as to minimise
   bandwidth demands either in number of download size.
2. I have an expectation that JavaScript on the device is used to
   accomplish processing, that is, no extra demands on the
   server.

-------------------------------------------------
|		barnet			enfield	|
|		    \			lock	|
|		     \		       /	|
|		      43    ---121----/		|
|		       \   /			|
|			\ /			|
|			AB			|
|wood						|
|green\						|
|      \			Z--123		|
|	141			      \		|
|	   \----T		       tottenham|
|				       hale	|
|					/	|
|				       /	|
|				CD--N73		|
|				  \		|
|finsbury			   30		|
|pk   \--236---CM		     \---dalston|
|						|
|						|
|						|
|						|
|						|
|                  you are here			|
|						|
|						|
|countdown  countdown  countdown  countdown     |
|     countdown  countdown  countdown  countdown|
|  countdown  countdown  countdown  countdown	|
|						|
-------------------------------------------------

2017-04-28 13:50
The ring system
1. The Ring.
    I envision the bus stops and other elements being laid out
on three rings, each ring of which looks like this:

		  __aasa>,.
		=wmZY|!{Smqs,
	      <w#Y~-     -"Uma.
	     <W?~          -"$p.
	   .vW(              +Xp,
	  .w#(                -Vm;
	  jD^                  -3m,
	 <m(                    -Xo
	:me                      )$c
       .jZ`                       3p,
       :#(                        -$(
       j2                          ]k.
      =m[                          )W(
      )E             A              3C
      d[                            )k.
     .m=                            :#;
     <#.                            .X(
     ]2                              3L
    .de                              ]k.
    :mk                             .3W:
    =We                              ]W`
    :d(                              ]m:
    <Wc                              ]W;
    )mo.                            .dW;
    =WE.                            =QD`
    :$m;                            vWe.
    -3Qp,                          <mWc
     )WQo,                        <mWE`
      )WQc.                      _mWE`
      -3WQc.    You are here    =mWD+
       -XWmg>.                =umQW(
	+YWWmp>.         .. =umQWX(
	  |3WWmwaa,.... _aaumQWE!`
	   -+U##QQmwwwwwgQWB#8(`
	     ---?UUUUUUUUUe~--
		 - - - --

While I've printed up somehting vaguely egg-shaped, I'd also
envision having the option of changing the shape if required.
"You are here" being at the pink spot sees it right at the
bottom of the ring, as matches that one's position is at the
edge of a predicted range from position "A", directly ahead.
Thus, bus stops that are close appear below A, further appears
above A. Whatever the bearing is from the user to the bus
stop gets applied to the element denoting it. If the bus stop
itself is at A, then that's where it's shown. However as one
moves away from A, the position is logarithmic such that
increasing distances make increasingly little difference to
the position: A bus stop one radius from A is show on the ring
itself, or just inside; A bus stop two radii away, if show,
would appear perhaps 1/15th of a radius outside the ring. This
would maximise close-up data at the expense of the far away:
how far to the next bus stop is more important than how far to
a bus stop 15 minutes distance - but the user can still
determine the difference between one 15 mins away and another
12 mins away.

I envision three of these rings on screen at once. (Note:
they're not necessarily or actually represented on screen but
appear present from the <div>s floating along them.) Each
element that gets on screen will have a type (bus stop, bus
route, near destination), a position X,Y and a distance.

Which type the <div> has defines which ring it's on: the bus
stops will be on or within the central ring, bus routes on the
middle ring, and near destinations on the outer ring. Although
note: I also envision near destinations hugging the outer edge
of the screen.

If two elements want to occupy the same point on a ring, then
they should occupy such a point adjacent to each other as to
have that point on a ring between them. Same with three elements
etc: one occupies the point, the other two are immediately
adjacent.

I have in mind that we model the ring into a behind the scenes
ideal, then use trigonometry to convert from that ideal into
whatever 2D space the user has given us - so accounting for
different screens and dimensions.

"Don't overlap" technology
  The desire is that multiple elements competing for the same real
estate on screen do not overlap as to do so makes it tricky for the
user to interact with them. How can this be implemented?

It can't easily be done (say with an OS call) as we won't know the
size of html elements on the ring the first time around. We will
know after rendering as JavaScript can run collison boxes against
the divs themselves.
Options:
1. If a collison is detected, restart all processing against smaller
icon sizes
2. "Bump" boxes affected by a collison by noting a
clockwise/anti-clockwise bump factor, then rerun positioning again.

    This gives a broad outline for processing:
1. Establish positions on the ideal ring, with 0 bumps
2. Collision detect, bump, and rerun.

  In the collison phase, a collison happens in a direction. When
reprocessed that direction is accounted for by having the object
concerned move away, either by shifting along the ring, or
clusering around that point on the ring. This repeats until no more
collisions or some other factor (max rereuns, for example.)

Could some other trigonometry shortcut things? If I know the width
of a the ring at that point & I know the width of the div, can I
calculate a new pos from it?

  Or instead, knowing that there's a bump there, change the
position 0.5x. If two bumps, change by 1x etc. Thi approach is
easier!

As it stands bumping to a side would leave a horizontal line across
the screen like "A", when we might prefer a cluster like "B":

		  __aasa>,.
		=wmZY|!{Smqs,
	A: __________   -"Um . __  B:
	  [CD,EF,GH,I]     - _[NM]
	   ----------       [RK,LM]_
	  .w#(               --[Q,OP]
	  jD^                  -----
	 <m(                    -Xo
	:me                      )$c
       .jZ`                       3p,

This could be accomodate by randomly assigning positions nearby and
directionally moving in the event of a collision. If no collison
then we use the original location. Direcrtion can be discerned with
trigonometry, as with the bearing.

All of the above exploration of the problem may or may not make it
into the final product but what it does to is reveal the nature of
the process for solving the problem:

zero everyones bumps
everyone get assigned how bump should be addressed (move left, move
	 away from user etc)
do {
   Positioning step:
   1. All objects get a new location on their ring while acknowledging
      bumps etc
   Collision step:
   3. Compare every object that might collide with every other
   4. If they do collide, note how they collide (which side, corner,
      which direction etc)
} loop back to 1 if any collisions detected and other factors
   (eg max reruns) allow

In this manner, we can add a function to the positioning step that
defines how a bump affects a position. In doing so we've successfully
abstracted out how the bump works from the rest of the code such
that we can easily change things later.

We can do the same for collision detection, adding collision based
on boxes, circles or something else altogether.

That we're doing it this way at all means we can do larger changes in
future too, such as drawing lines from the bus stop signs to tinier
dots that don't get bumped, for example, by adding objects, rings,
and additional rules for positioning and collisions.

Planning for future changes is good :-)

2017-04-28 17:29
Back to the first project and what's left to do.

[x] Establish list of additional elements to be made available
 x near destination (visual)
 x routes serving that bus stop (visual)
 x distance (property) from predicted location (already there)
 x bearing (property) from predicted location
[x] Arrange the data is cleaned of duplicates before use
 (look into whether still happening today on road)
[ ] Arrange the countdown data is ordered before use
 - first ordered by minutes to arrival
 - second ordered by bus route's first arrival
 (move these to the UX)

With geolocation down again, rewrite the call again to use fake
positioning data. Notice and fix errors!

2017-04-29 09:25
I remember 'use strict' from php, and sure enough JavaScript has
the same feature. Turn it on and all I'm noted as problems are
a few undeclared variables. That could be because that's all it
strict mode looks for. But I like to think it's because my code
was great to start with.

Much of the duplication was because data was being sent to the
screen without the previous data being removed, particularly
where the countdown entries are concerned. Adding clean up code
and the problem seems to go away. I don't at this time, however,
go looking for where else it might be happening. Too early, too
little coffee. Also I plan to road test the project - duplicates
were such a problem before that if they're elsewhere that should
reveal if they're still there.

It's clear from the day that when a bus stop is removed, the
routes through that stop are not also removed. We should remove
unused entries in renderBusStops(). As a quick and dirty, we
could just remove all previous elements, totally rebuilding
each time. I'd rather not do that: it's inelegant for a start,
and there's almost certainly advantage in not rebuilding
perfectly fine data.
To delete just the expired ones ... we would get a note of all
the bus stops on screen; we'd then cross them off as we update
each; any left uncrossed off were not updated and should be
removed. This means a class. Any element associated with bus
stop K (that is, bus stop, countdown, near dest, route nos)
gets the same class. Two classes.
class="busstop, busstop_<naptan>".
1. Retrieve all elements with class busstop.
2. retrieve class name 'busstop_<naptan>' to an array as the
   index array['busstop_<naptan>' = 1]
3. If the new update matches an entry in the array, it is
   removed from the array
4. Iterate over whatevers left in the array, removing them
   from DOM.
So:
[1]. Always add class "busstop" to just the busstop itself. We
will only need one place to associate the busstop and naptan
[2]. Always add class "busstop_<naptan>" to the busstop itself,
to routes, to near destinations.
3. On render, retrieve all elements with "busstop" (relatively
few elements)
4. Populate an array with the classname matching "busstop_"
which has the naptan following
5. if the rendered bus stop matches an item in the array,
remove it from the array
6. loop over the array removing any bus stop, route
countdown or near destination matching each element.

30 April 2017
Completed the above. A quick walk about to make sure it's dealt
with the problem. Then we start looking at the second project.
On return it looks like it was still happening even with a
browser reset. Which bus stop do they apply to? Show the
naptan alongside. Test again - might just be elements are right
but not in order - took pix to check. Inconclusive! Add naptan
to bus stop too. Yes: confirmed its just they're out of order
at least for the example I'm seeing. Seperately, I do see a
duplicate of the bus stops being added. That looks like its
because the count of the stop is included in the id: if the
stop comes in earlier or later, the count changes and the
id doesn't match. Walkytest: Seems like the same "+ count"
thing happening to the other elements. Silliness! STILL wrong
as now only showing one route pet stop.
Would really be good to set up a capture of positions as we go
along and a method by which they can be replayed elsewhere.
Fix again. Now much better.
    So what went wrong there? It took an inordinate number of
iterations to correct what was an apparently simple problem.
To wit: I was uniquely identifying each html element being
used to hold bus stop, near destination, route no or arrival.
The arrivals didn't have a problem as they're being renewed
in whole each time. As that was a focus, that might have
fooled me into disbelieving unique identifiers was a problem.
However the ids used for the other three were including
an identifier /outside/ the purview of uniqueness: they were
using the count of objects having been added before this one.
This certainly uniquely identifies each element on a page for
sure, but it does not allow elements to be uniquely identified
as being the same element from the last time the page was
generated should the order that data arrives change.
    Next time I look at the same technique of uniquely
identifying html, I should also consider it should also
consistently identify across reloads.

2017-04-29 16:52
Now to look at proper rendering: Project 2.

As a reminder, the development thus far has been driven towards
creating an abstraction of what's going to be on screen, so as
to leave decisions about what the content looks like to UX.

My intention for UX is to start from the rings idea described
above.
1. The viewport doesn't scroll about - there's no left, right,
up and down
Accomplished after I worked out scrolling was down to slight zoom.
Project with UX started from b.html: a.html will remain project
with no UI work.

     With the viewport now fixed - as if it was an app of the
java/swift variety - I want to start placing content where I want
to see it. Starting with "You are here" on the pink ball spot.
At this point I want this to appear right at the back of the page
as it's so unimportant. Done.

   Now comes the trickier part: giving effect to the ring system.
Recall the egg shape from earlier on. The project already has
access to type, distance, and bearing of the various objects.
This is all described as if on a circle: we want that location on
the circle translated to the correct point on that egg. We also
want to do this to a very fine degree such that multiple points
in one space translate into the same place in the html. this is
an old games writing trick: when used, it makes objects seem to
move much more smoothly. This would appear here as the bus stops
etc moving around the ring more smoothly, Think of it as
anti-aliasing for phsyics.

Have a look at Moire patterns, or rather just one of them patterns
used for interefering: you'll generally have black stripes among
clear areas. Think of the black stripes as where something could
appear, and the transparent parts as where something will never
appear. It will not take long for the human eye to sense that
pattern, and it rankles. We will get a pattern of some sort -
that's just the nature of mixing digital and angular positions.
But if we increase the resolution of that space, then translate
it down into a far smaller space, that goes a long way to
hiding the problem.

   The project as stands assumes a viewport of 360x510 (sub 1 pixel
at the mo, so I can see if the border is there). The inner egg
might be around 250x350. What we're going to do is position on the
egg as if it had a resolution of 1440x2040. Once done, we scale
them down to the original 360x510 before placing it on screen.

     The essence of this scaling is simple enough: during all
calculations we assume the larger space. Only immediately before
rendering do we scale co-ordinates by 4 to the final, smaller space.

   Additionally, we want to translate each point on the circle to
an equivalent point on the egg. I should thing That egg could be
described mathematically but my maths is not upto that.
Further, it would actually be inefficient to run such calculations
repeatedly.

We'll use another trick from programming games: look at the
jumping figure in a platform game like Manic Miner. Every time
the character jumps he moves a greater distance at the start slowing
until he reaches the middle of the jump, then accelerating as he
approaches the ground. This movement is described by a semi-circle
over time:


18|Height            _aaaaaa/
  |               ajQQP????4QQ6a
  |             aQQ?'        )?QQa
15|           aQQ?              ?QQa
  |          jQ?                  ?Q6
  |         jQ'                    )W6
  |        jQ'                      )W6
  |       jQ'                        )W6
10|      ]Q'                          )Wf
  |      Qf                            ]Q
  |     ]Q                              Qf
  |     Qf                              ]Q
  |    ]Q                                Qf
5 |    jf                                ]6
  |    Q'                                )W
  |   _Q                                  Q/
  |   ]P                                  4f
  |   ]f                                  ]f
0 |   ]f                                  ]f
---------------------------------------------Time
   ^      ^      ^      ^      ^      ^      ^
   |      |      |      |      |      |      |
Frame 1   2      3      4      5      6      7

At frame 1, the height is 0
At frame 2, the height is 11 +11
At frame 3, the height is 16 + 4
At frame 4, the height is 18 + 2
At frame 5, the height is 17 - 1
At frame 6, the height is 12 - 5
At frame 7, the height is 0  -12

Instead of running trigonometric calculations to discover where
on the circle we should be, and thus how high the character has
jumped, I've recreated a table here with those values precalculated.
I no longer need to do processor intensive maths - I can use that
lookup table just knowing how many frames into the jump we are.

       I'm going to do something similar with the egg. Whatever
calculation would do this work would be very inefficient as it
would repeatedly need doing so I'll create a circle-to-egg
lookup table.

       The form of such a table should be nice and easy. Given
the angle N, what is the X, Y from the top left of a rectangle
holding the egg? For example, at angle 0deg, the X, Y will be
720, 0: The egg lives in a 1440x2040 box, remember. Similarly
at 270deg X, Y will be around 200, 1020 (not 0, 1020 because
the widest point on the egg is further down than where the it
would be for a circle.)

      First, I need a picture of the egg at 1440x2040. I've
added one to the repo, made by taking a circle with a dot in
the middle, then using perspective and scale on it until it
fits. The centre, which was at 720x1020 is now at 720x477. We'll
be measuring angles from there. The egg is also very slightly
smaller than the 1440x2040. This shouldn't make very much
difference to the final product but certainly if it did one
might spend more time getting it right.

      The centre, which is the exact point where the prediction
coords say we will be, is at 720x477. The greater the distance
from this coordinate, the further from 720x477 the element will
be positioned.

   The edge of the egg is taken to mean the radius provided by
the prediction. The "You are here" is obviously inside the egg
yet the maths in the code say the user is actually one radius
away, that is, on the bottom-most edge. This is because I'm
intending to add a second call for things immediately near to
the user which would seem to take the user inside the ring.

    Manually checking a few angles, using GIMP, from the origin
to the inside edge of the egg we get the following:

    At	 0deg, x = 720,  Y = 1
    At  45deg. x = 1063, y = 134
    At  90deg, x = 1313  y = 477
    At 135deg, x = 1416, y = 1173
    At 180deg, x = 720,  Y = 2023
    At 270deg, X = 128,  Y = 477

Notice that while I did record the result for 270deg, we only
have to find the results for one side of the egg. As the shape
is symmetrical we can use maths to calculate the other side.

  I also note that 1deg on the top edge is 8 pixels away from
the centre axis. On the bottom edge it gets to 26 pixels away.
This suggests that a single pixel of movement in this large
space egg is equivalent to 0.0384615384615deg of movement in
the real world.

   In gimp, the angle tool will detect 0.18deg of changes at
the top.

    Now we could manually check every single angle using gimp,
filling in the look up table as we go. That would get kind of
boring. We could instead write a program to accept the image
and repeatedly test every 0.0384..deg angle and note the
position where the maths hits the inside edge. For this
project we're going to cheat again and only note the angles
at which the x,y would change and assume that any other angle
since the previous one would shar the same x,y or can be
calculated through a slight adjustment.

The lookup tables data will start like this:
720,1	       90
746,2	       86.87
759,3	       85.30
770,4	       83.97
777,5	       83.11
785,6	       82.14
... and so forth.

    Should we be required to calculate the positon of something
at 88deg, for example, we'll do yet another cheat. We aready
know the Y position will be 1 (as it is for all angles from
90 through to but including 86.87). We'll guess the X by
calculating ((90 - 86.87) / 26) = 0.120384615385. Thus,
X = 746 - ((88 - 86.87) / 0.120384615385) = 736.61341853
  Thus, 88deg = 736, 1
Now, gimp says the true answer is 737, 1. Given that we're
calculating on a map four times the size of the screen, this
cheat is well within the margin of error.

2017-04-29 21:40
      Time to complete the lookup list.
      Well -- that only took a few hours! Next up, the look-up
list data needs to be massaged into place: the x and y is accurate
but the angle in the top right quadrant needs to be started from
zero (and so angle = 90 - value). In the bottom right quadrant it
needs to start from 90 (and so angle = angle + 90.) We then look
at the left hand side where the x y is identical to the right
hand side. However the angle starts at 180 and goes up (so
angle = 180 + 90 - angle.) And so to the top left where the
angle goes up from 270 (so angle = 270 + angle.)
      Our main way of interacting with the lookup table is to
index based on the angle. The lookup table does answer the
question - "what is the element's positon if its bearing is X?"
There are far superior ways to store the lookup table for
efficient access, but my purpose is to be effective, not
efficient, so to start with we'll just loop through them all -
there's only 700 of them.
	Next step: massage the data into the correct angle and
to account for the left side too. For that I'll use a spreadsheet
The data files user are also added into the repo.

    Now that we've got the ring map file into JavaScript as a
constant, we can now work out where to display stuff according
to its bearing and distance. We'll start with the bus stop
codes.
	To start with, we'll just dump everything at the point
given by the ring.

2017-04-30 11:00
   Well first effort is wrong because the left hand side data
had the right angle, but hadn't adjusted X pos to suit. After
doing that, the result looks very good indeed.

      Having converted the bus stop signs to just their letters,
I notice that with the 'undefined' stopletters I can't just drop
in that lovely greek 𝈚  symbol - createtextnode doesn't seem to
allow me to pass the unicode through. Decision to use @ symbol
instead - to be effective, not efficient.

   Next up is to apply the "three ring" idea from earlier on
whereby the bus stop codes would occupy what will appear to be
a central ring of three. We'll do this by swapping the divison
from the ring space of 1440x2040 not by 4, but by more - along
with an offset to adust for the centre of the page.

     That also looks good. Next up, we'll get the font into
something sans-serif, and a bit smaller.

2017-04-30 11:00
   That's the ticket. Now I want the near destination to appear
pushed up against the external edge of the screen.

If we're to follow the 'ring' model as per the stop letters
this won't be as easy as them: While we fix the position of the
text according to the stop's bearing, we then want to adjust
that position inwards to wherever that bearing crosses the
rectangle of the viewport (or smaller, depending on whether we
leave viewport room for other things, like the countdown.)

      We could just cheat, and have fixed points at which they'll
appear, with the next available fixed point in that quadrant (or
even that octant) being used.

     In fact, what little trigonometry I know might be of use:
if we have an origin, an angle from it, and we know the length
of a triangle's side ISTR from school we can calculate the
missing length. A quick google and the right words kind of come
back: I'm pretty sure that we can calculate the opposite side of
a triangle knowing the angle and the length of the adjacent side.
Pythagorus' theorem? A bit more googling gets me to
https://www.mathsisfun.com/algebra/trig-finding-side-right-triangle.html
At "Example: Find the length of the side y:" I get the formula -
I should use tangent(angle) * 180.
  Will have forgotten this by morning - the downside of "just in
time knowledge".

     Its clear that css can't help in all things - the near
destinations look great along the left or along the top but go
off the screen at bottom or on right. Alas there's no 'use some
other point that top left for your coords' as one would get
elsewhere. As the width of the element can be judged before
rendering, that seems to leave me requiring a JavaScript
solution to getting content back on screen. The problem can be
frame thus: does coordinate + width/height take the content
off screen? make the coordinate the maximum, then substract the
width/height to compensate.

   In the end, implemented this without tangents at all, rather
placing them on screen and shuffling their position back until
either x or y hits an edge. Incredibly inefficient! But still,
effective.

2017-05-01 20:45
   Looks good off on walkies again.
Feature creep: wouldn't it be great if the user's own bearing
was taken into account? I-meant-that-at-the-beginning edition.

    We can now get the bus route numbers themselves into the
middle ring:
    Currently they are ranged down the left hand side as they
come in. Rather, they can fit in the spaces between the stop
letters in the central ring and the near destinations on the
outside. I can tell they'll overwrite each other, but bumping
is a problem for a little later.

And now acknowledge distance too:
    If the bus stop is dead on the prediction point, then we want
it displayed on screen exactly on the prediction point. If it's
exactly one radius away it should appear on the ring. If it's
halfway to the radius, it should appear (something like) 2/3rds
the way to that edge.

    Actually no: we want it to be logarithmic from the user, not
from the prediction point. Or do we?

     Exactly the sort of question that comes up when programming.
The actual answer is not that interesting, but it clearly shows
the value of constructing the program to accomodate potential
changes. For now we'll use logarithmic from the prediction point.

  When I write 'logarithmic', what I'm wanting is that the greater
the distance from the prediction point, the less any more distance
would matter.

100ft = 100 px
200ft = 150 px
300ft = 175 px
400ft = 187.5px etc

      It looks like I ask for Math.log(distance) and get back some
number. I ask for Math.log(radius) and get some other number. I
then use the relationship between the two to work out the distance
I'm actually going to use. Then adapt the positions, relative to
the origin, accordig to that relationship.
    Done. Certainly looks different with the code on than off -
can't actually tell if it's what I want. I could, of course, fake
a data set that has bus stops every 20m in a grid and see what
comes back. That would mean writing up a script that fakes lat,
lon and distance - mandatory in a bigger project, but in this free
one  I'll do if it looks too nuts.

2017-05-01 09:32

This is a read-only project. Or is it?
     This is about security. A big part is managing user input: if the
user is allowed to get data into the device, there's the possibility
of the device being cajoled into unexpected behaviour - we really don't
people's devices becoming part of a bot net, losing their cat pictures
to thieves, etc.

   I've not covered that much in this project, for the simple reasons
that there is as yet no method of providing user input, but one: the
proxy. Let's deal with it now.

       The proxy's function is to manage CORS issues by sending data
requests on to TFL. It does this with a configuration change rather than
a program I've written. The change simply forwards whatever arrives to
TFL.
	As a general thing, whether the Apache program allows attacks
against it is something that could be detected by me, but would be
addressed by their project devs. Detecting whether Apache allows an
attack against it's proxying service has to be outside the scope of this
project. One could confirm the ordinary security of Apache. I've chosen
here to assume the ordinary security of Apache - I've known and used it
since the late 90s.
      A second security question is about the forwarded traffic. The
proxy is necessarily revealed by the JavaScript to the end user who can
then craft such requests as he likes knowing that to the TFL admin, the
request appears to have come from me. That their API might be
susceptible to an attack is obviously a question for their own devs.
However if an attack did arrive to them through my proxy, I'd like to
point the finger at someone else. For that reason Apache logs are so
constructed as to keep some data: if necessary, they can give me the
time of an attack, and I can determine from which IP address it came
from.
      Thus, even though this is ostensibly a "read-only" project, in
fact there are ways in which it can be subverted and so security should
still be considered positively: "How could I cause mischief?" And not
blithely hand-waved: "Oh, it's read-only".

Smelly code:
       This name is used to describe code whose presence seems to indicate
a much deeper problem, even though it otherwise works.

  This has happened with renderAddDivWithText(). The function originally
started life as renderAddDiv() whose purpose was to get something into the
DOM. However that use got expanded to include adding text to that element,
then classes, and positions, and adjusting margins ... to the point where
I was forced to look again at what that function was meant to do. It
started as a way of getting a generic something to the DOM. It's now
required to get particular things into the DOM. And so the generic
function renderAddDivWithText() has been forked into functions for
specific tasks - getting the Bus Route into the DOM: renderBusRoute().
Likewise renderNearDestination().

	 The code smell dissapates in part if we acknowledge in the
function name that this is older code, and shouldn't be expanded but copied
and specialised. renderAddDivWithText() can become renderGenericDiv().

    That done, it still has smell: renderGenericDiv() and renderBusRoute()
do an awful lot of identical work. Indeed, only one line is different -
an adjustment to positions based on the ring. This is not 'Generic' at all
and heavily implies we should either break their commonality into another
function common to them both, and consider whether something handling that
one specific change should be on it's own.

And more: the function for renderCountdown() has got separated from
similar functions. A larger project might contain all of these in different
files. Here I want to keep them in one file (as reduces bandwidth and
keeps speed up) and so keep them in sections. Review for any code out of
section. Major change!

    Another one again: am I handling positioning in two different places
in the code? Well, it's actually all over the place. As well as duplicated
effort, there's smell from being inconsistent about what operation I'm
looking to do. We'll use 'scaleRing' to get from the 1440x2040 egg to the
360x509 screen. And 'getPositionOnRing' for operations only on the egg.
And that reveals the big stinker: translatePosToRing3. This seems to be
doing the work of both scale and getPosition.

Test:
	Walkies. Not massively impressed with the logarithmic distance.
Perhaps because not enough to contrast it with, perhaps because the update
rate is too slow for nuance. It did give me the idea of clicking and
holding making the selected item grow in size for legibility.

Lots of names for the same thing:
     It doesn't (yet) amount to a problem, but there's quite a few places
where the same thing has different names. The number on the front of the
bus is known as the 'line', at their main site it's known as 'bus route'
and 'route number' and 'bus number'. Four names at least, and I haven't
even looked at my own code where I use 'routeno', 'bus route' as well,
line[routeno].name and .lineName - seven different names for the same
thing. It isn't a problem at this point, but it is an indicator of code
smell: if different names are being used, are they being used for very
subtly different things? 'Bus number' above /could/ be read as meaning
literally the number on the front of a bus - whatever number it may have
- rather than the figurative route to which that bus has been assigned.

"Fake" support should be in a separate file
       In a server-side project, this kind of test support would be in a
separate file to pull in as and when needed. This is cleaner as source,
and a good security help (if it ain't present, it can't run.) But with
JavaScript this approach would be against what I'm trying to achieve with
fewer network calls helping keep the costs down and speed up. Of course,
were the project ever to be serious, the support code could be removed in
whole.

2017-05-01 14:18
Take the user's heading into account
     As it stands the display will show north at the top, regardless of
whether that's the user's heading. It would make more sense to accomodate
that heading by rotating everything around such that the user's heading
is at the top instead.
   Sounds complex, but it shouldn't be: once we have the heading, it
should be a case of adding that heading to any use of direction.
Obtaining the heading is easy: we already know it from the prediction
stage. We'll dump it into sessionStorage so it can persist into the
response stage.
	 Does it work? It certainly seems to. I've temporarily added an
html slider to see. Looks fun!
     Changed to use keypresses to single step around. LOL lots more fun
and also two revealing facts: JavaScript modulo doesn't handle going
below 0 by wrapping around but rather actually does go below actual 0.
Once replaced with the effect I'm after, it's also clear there is a bug
somewhere: the left hand side seems to see bus stops in position X
instead of origin - x. At this point, only the right hand side seems to
position reliably. Nice fix.
	 Not convinced by using no logarithm vs using it too. How
interesting.

2017-05-02 15:40
Bumping along the ring
	All the elements have a problem with overwriting: two of them
occupying the same space will appear one on top of the other. The bus
routes suffer this in particular.
       It looks like the "don't overlap" facility will assume that the
renderfield is actually another buffer for the final positions, much
as the egg was: the positions described are further processed to reach
the visual position.
    This would happen with the collison boxes described a few days ago.
Once placed into the DOM, the locations and sizes of the various
elements can be detected with JavaScript, and actions taken to handle
that.
	I had originally thought that it might be easier to bump them
into a line. That would only be if I was bumping them from behind the
scenes - once they're on screen then any solution is as hard as any
other.
	The solution, using collision boxes to determine what's up,
gets exponentially more processor intensive the more items there are
on screen, as every additional element doubles the number of checks
to make. This may well be too much of an issue on smaller devices. An
alternative might be to click, hold and slide about the screen such
that whatever gets focus gets visually larger: the user could then
click on that larger element having made sure of what it says. While
an alternative, it's a poor alternative to bumping, if we can.

   The nature of collision boxes is a simple array of all the
elements, and their shapes and size. We'll only use rectangles for
this project. We then scan that array for collisions until none are
found. If we do find a collision, we use the information available
to shift them about, and then scan again.

   Another option, which I used in a previous life getting finanicial
charts automatically laid out, is more like a sifting tray: as the
elements become available, they're put into the tray as close as
possible to their home position as possible without colliding. In
that previous cause I then had an algorithm calculate invisible bubbles
to fill up the space, so spacing the charts out from each other nicely.
That's not necessary here, but the idea of pre-placement is very
attractive, as it means we only need scan the array once per element.

	    A collision has occured when a pair of rectangles overlap,
something that's trivial to implement. What to do about it is more
challenging. And persisting that array for next time more challenging
again.

	We might want to persist the array such that if the positions
next time are no different from this time, then we can already tell
where the items should go. I'm not sure that's appropriate here - the
idea is that the positions /are/ different at each moment because of
the movement of the user through real space.

    I don't think the sifting tray is appropriate here: a financial
chart changes alot less regularly than the output from this project.
Instead I'm going to use the array/bump method. I'm also not going
to persist the array as I expect different positions at each moment.

   The array itself could simply be the DOM, with bumping of
elements automaticallt bumping items on screen. It could also be made
up from the DOM, juggled, and then have bumps applied back. It's in
the interests of performance, and the interests of future use that
it's the latter.

[ ] Step 1 - establish where the collison code is to go and get in
  placeholder code.
[ ] Step 2 - establish the array of elements in their existing state
[ ] Step 3 - process for bumps, bumping where merited
[ ] Step 4 - Apply bumps to DOM.


[x] Step 1 - establish where the collison code is to go and get in
  placeholder code.
  Where this code goes depends very much on how the implementation
occurs. On the one hand, the array filling element can happen as we
post elements to the DOM, or we could traverse the DOM afterwards to
establish what is where.
	  By the same token, where the bumping happens is also
dependant on implementation. We could take the Tetris-style approach
of bumping each element as we post the element, or we could wait
until after and bump them then.
      I should also mention we could do both: drop everything in the
array, complete with bumps, as we go; then follow up with a full
bump of everything afterwards if required. (Although, if we require
it, it may already be too late - we may require it because the screen
is full and cannot be fixed with a bump.)
   The better solution is the first: fill in as we go, Tetris-style,
bumping as we go.
	Another point to note: we do leave html on screen, so the
array will need to be persisted from one frame to the next. That means
the array itself will only get set up once: on landing. It would then
survive in localStorage.
	This does raise the prospect of race conditions: with the
bump array and DOM both tracking what's on screen, the possibility
exists that they'll diverge. To minimise this, we could instead reload
the bump array at each new rendering from what's already on screen,
deleting where appropriate and as we go. If the bump array and DOM
diverge, that should leave the two out of sync for no more than one
refresh, greatly limiting the damage.
	 This also raises the possibility that what's already on
screen, if it has a neighbour that's been deleted, may see odd gaps
forming. as there's no thought here to specifically re-using that
space. Indeed, we won't know the space can be reused until after the
whole frame has been written. Beyond that though, random chance should
see the empty space reused. Out other option is to force a reassessment
of what goes where whenever an element is deleted.
   This is a small project: we'll allow the problem of reusing deleted
space to go unaddressed.

The array should be set up before we start posting the html.
As we post html, we should address the bumping.

   Doing this we can see we'll need to store both the id and any class
names the object has. We can already tell we'll want to store the
x and y positions. So this gives us an outline of and individual object
in the array.

[x] Step 2 - establish the array of elements in their existing state
   Good! 218 objects around trafalgar square.

[x] Step 3 - process for bumps, bumping where merited
  When we add something new to the bumpArray, we want to check that
what we're adding doesn't collide with anything else. If it does, we
want to see a call to placeholder code. As we might want to run
a bump check at some point /other/ than when we're posting a new html
element, we want to do this in another function.
	 Done. Looks good rotating manually around Peckham fake data
too. Also rotates around Trafalgar too, but there's so much bumping
going on that near destinations and route numbers vanish off the
bottom of the display. Worse, bus stops are forced off the bottom too
although this could be handled by prioritising bus stops. The response
is much better for Peckham. However a decision about what to do is for
the next review, not for now.

[x] Step 4 - Apply bumps to DOM.
    Done at same time as step 3.

    It's clear from the trafalgar experiment that there can be so
many bus routes that it's clearly impossible to fit them all 'along the
ring' as planned. Where they are few in number - as with the Peckham
test - there is no need to shift them along for much if not completely
all of the bearings available. It even looks like some cheating could
make things easier: depending on which octant the element starts in,
shift things up/ down/ left or right. IE, 0-45deg, shift right;
45-135deg shift down etc. There's enough room in the
bumpomaticCheckIfCollides() to form new ways of bumping.

	  The manual rotate is so fun, I'm going to leave it now
instead of off in that test file. For the mo I'll leave the keypress
code live, as well as a touchtable table cells for direction to
rotate. Aqua and Chocolate for their first letters - Anticlockwise
and Clockwise.

2017-05-03 00:08
In its current state, we can return to do some signing off:
[x] "you are here" in the pink ball position
[ ] Ring system:
  [x] Positioning system based on three rings in the centre,
    middle and edge of the screen such that data can be
    located on each ring if given either a bearing, or if
    located on the middle ring and given an inner and outer
    ring pair it should connect
  [x] also that given a distance, can arrange for distance from
   the centre of the screen to be logarithmic so to fit more
   data on screen
  [x] Also that the rings may be of arbitrary size, such that
    one can be given more screen real estate at the expense
    of the others
  [x] also that elements occupying the same ring should not
    overlap but expand around the ring. Two or more elements
    occupying the same position on the ring should centre
    around that position on the ring;
  [x] that the rings be associated with the user's heading such
    that when the user changes heading, the elements on the
    rings shift around to match
  [ ] That elements on the centre ring have lines connecting them
    from their inner to outer ring
[x] that bearing and distance be used to associate bus stops with
  positions on the inner ring
[x] that those bus stops reflect the red/white code seen on top
  of bus stops
[x] that the near destination for each bus stop code occupy the
  outer ring, initially following the bearing of it's bus stop
  partner in the inner ring
[x] That touching a bus stop code in the inner ring will bring
  up/replace an ordered countdown below the pink ball spot
So only the lines are missing. I'll add that below.

Margins are a real menace, and so are touchscreens: a crap UI
	Well, that's written with tongue firmly in cheek. The UX of the
project is awful. But that's still one step up from where it was at the
end of the first stage - downright appalling with the data in divs
ranged down the left hand side. But then if you want a pretty site you
get a web designer to do it - not a programmer.
    Crap as the site is, it achieves what I wanted:

1: It demonstrates the hard division between UX coding and the
Middleware/server-side coding: I've had to make no changes to the latter
two in order to implement that UX. As isolatable parts of a project, it
is demonstrated that the two could be run together as long as the
interface between them has been addressed. It's worth addressing that
interface at the beginning as it would allow progress front and back to
happen concurrently.

2. It demonstrates that programming UX may actually be harder than the
back-end stuff. I find it easy to model network connections, objects
and process in mind. Accomplishing the ring forced me to relearn the
actual trigonometry from school; it forced me to reimplement a bumping
solution similar to one I used twenty years ago.

3. It demonstrates that the character of the work is different to the
middle and back-end. There, I spent some on a very wide range of skills
before I could start programming what is a very narrowly demanding
middle. The UX requires a much wider skill from the programmer. In this
project at least, it has a much narrower range of ancillary knowledge.

The middle:
===========
End           ]Q                  <--- The programming is simple
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
Time          ]Q
Taken         ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |            ]Q
 |      _a    ]Q
 |  ]Q  ]Q    ]Q      _a
 |  ]Q  ]Q_a  ]Q      ]Q
 |  ]Q  ]Q]Q  ]Q  ]Q  ]Q_a]Q
 |  ]Q]Q]Q]Q]Q]Q  ]Q]Q]Q]Q]Q]Q
 |  )?)?)?)?)?)?)?)?)?)?)?)?)?   <-- At the start a very broad set
Start-------------------------       of relatively shallow knowledge
    <---- Range of skills --->       is required for setting up

The front-end:
==============
End           ]QQQ               <-- programming skills are thicker because
 |            ]QQQ                   they were more demanding
 |            ]QQQ
 |            ]QQQ
 |            ]QQQ
 |            ]QQQ
 |            ]QQQ
 |            ]QQQ
 |            ]QQQ
 |            ]QQQ
 |            ]QQQ
 |            ]QQQ
 |            ]QQQ
 |            ]QQQ
Time          ]QQQ
Taken         ]QQQ
 |            ]QQQ
 |            ]QQQ
 |            ]QQQ
 |      ]Q    ]QQQ               <-- fewer non-programming skills are needed
 |      ]Q    ]QQQ                   but what's needed is not likely as shallow
 |      ]Q    ]QQQ                   as knowing the config location and the
 |      ]Q    ]QQQ_a                 manpage
 |      ]Q    ]QQQ]Q
 |      ]Q    ]QQQ]Q
 |      ]Q    ]QQQ]Q
 |      ]Q    ]QQQ]Q
 |      ]Q    ]QQQ]Q
 |      ]Q    ]QQQ]Q
 |      ]Q    ]QQQ]Q
 |      ]Q    ]QQQ]Q
 |      ]Q  ]Q]QQQ]Q
 |      ]Q  ]Q]QQQ]Q
 |      ]Q  ]Q]QQQ]Q
 |      )?  )?)???)?
Start-------------------------
    <---- Range of skills --->

And for line counts:
  21   33  482 a.html
  31   73 1038 b.html
   7    8   57 index.html
  49  125 1284 uu2.html
  84  226 1977 uu7.html
  29   55  522 mystyle.css
 221  520 5360 total

  53   127  1226 connect.js
1155  3411 31711 scripts.js
1208  3538 32937 total

  21    114    731 Goals
  64    308   2150 UnknownUnknowns
  46     97    832 Resources
  46    241   1515 Todo
 181   1158   7504 Diary
3237  24031 144232 Thoughts
3595  25949 156964 total

So: 221 lines of markup, 1208 lines of code excluding 1600 odd lines of
the egg shape, and 3595 lines of documentation.

2017-05-03 11:42
Lines connecting bus stop to near destination
-------------------------------------------------
|		barnet			enfield	|
|		    \			lock	|
|		     \		       /	|
|		      43    ---121----/		|
|		       \   /			|
|			\ /			|
|			AB			|

			The original design made it clear that what was
thought of was a line from the bus stop through the route numbers and on
to the near destination. In the Trafalgar square situation, that's going
to mean around 400 lines crossing the screen. In the Peckham situation,
the near destination is already - except with bumps - on the other side
of the route number from the bus stop, following an imaginary line along
the same bearing. In the former case the lines would add nothing but mess
and in the latter they add nothing that isn't already perceived by the
user.
    Lines should really go forward to the next UX review as something that
should be abandoned.

2017-05-03 13:40
Bug hunt mode
    With the UX checklist completed, I'm now operating the project live
looking for reasons to think the checklist is not complete. An obvious
problem was the Arrivals data was not being wholly cleaned off screen
before new content was added. This is a serious bug, as it gives the
impression of extra data when in fact there is none. As a serious bug,
I fixed it on seeing it.
  A secondary bug is that at some point, elements that should appear
at the top of the screen in fact appear condensed into the top left corner.
This smells alot like some kind of problem when the angle is 0 or negative.
This is a less serious bug, as it's not adding or removing data that should
be present, merely presenting it other than I would wish.
   "Other than I would wish" also describes how near destinations move
around the screen - the intent was that they shift smoothly into and out of
the corners as they rotate. Instead, they seem to cut the corners. Perhap
Ring 3 is a lot closer in than I thought, instead of far off-screen and
clipped to the edge.
	These last two bugs are not so serious and smell trivial to sort
out. For both I'll leave them to the review.

Linting
	This is an automated way of discovering That Code Smell. I've run
through JSHint once - and dealt with missing semi-colons because I'm short
on time. Happily, half those missing were from stack exchange code

Walking test suggestions:
1. touching the near destination lights up its bus stop
2. Touching arrivals also lights up stop
3. persis the fake heading as rendering cancels user's choice
3a. so that means a way of resetting user's choice
4. Arrivals from choosing bus stop diverge significantly from that gained
   from old site + sms code
5. Unique bus numbers down right hand side
6. radius line with 50m marks that sees marks move as radius changes
   |____|____|____|____|____|
   0   50   100  150  200  250

   |______|______|______|
   0     200    400    600
7. Stop colliding colour red for everything, or only make bumped border
   red
8. stop name called out some distance before can see stop letter: option
   to use that instead

Linting:
	'use strict' is preferred inside the function, just in case of
sloppy code in a concatenated file. I never even knew you could concat
.js files.
    use === in preference to ==, ok got me there
    var x = {}; is preferable to var x = new Object(); .... hmm, ok, I
	can see less overhead than when entering a function
    "readers may interpret this as an expression boundary" errors. Ok, if
	     I assume the reader is a peice of software rather than an
	     idiot, I can see that too
    A clear problem with doing setup only after the code has first
      started, yes sir. Also for..in loops will go awry iterating over
      arrays, I've already been stung by that. Stop the others too.
    functions use as callbacks could also be called normally, and so
	      'this' references would fail. I wish there was a better way
	      of handling this than commenting the programmer has checked
	      that. It could be done as an anonymous function I know, but
	      I don't like committing to not reusing code like that. Also
	      changed the function name to make it clearer to my future
	      self that this is for use as a callback. Better idea? Allow
	      callback <function name>(<args>){ } as well as
	      function <function name>(<args>){ }.
    Get rid of duplicating declarations. Yup, agree with that too.
    Integrate the XHR code into the main file
    Rename dollar variable to be consistent with my own

---------------------------------------------------------------
1. Bug: At certain points in the rotation, all three rings have content
that appears at very top left for a moment, then moves back into place.
